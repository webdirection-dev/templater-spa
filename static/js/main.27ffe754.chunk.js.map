{"version":3,"sources":["components/currentTime/currentTime.jsx","components/layout/header/index.js","components/layout/header/header.jsx","data/dataForItem.js","components/controlTitleItem/controlTitleItem.jsx","components/controlTitleItem/index.js","components/currentTime/index.js","components/controlPanel/controlPanel.jsx","components/controlPanel/index.js","components/cardItem/cardItem.jsx","components/cardItem/index.js","components/notifyPerson/index.js","components/notifyPerson/notifyPerson.jsx","components/updateCard/index.js","components/updateCard/updateCard.jsx","components/table/alert/index.js","components/table/alert/alert.jsx","components/cardsList/index.js","components/cardsList/cardsList.jsx","components/table/generatorTxtOut/index.js","components/table/generatorTxtOut/generatorTxtOut.jsx","components/table/index.js","components/table/table.jsx","components/layout/main/index.js","components/layout/main/main.jsx","components/layout/footer/index.js","components/layout/footer/footer.jsx","components/app/app.jsx","components/app/index.js","index.js"],"names":["Header","className","href","id","target","rel","DataForItem","summary","icon","name","tg","label","value","priority","effect","qualities","stand","notifyPerson","userName","ControlTitleItem","getNameAction","nameAction","useState","namePanel","setNamePanel","isIconForTab","setIconForTab","onShowPanelItem","event","namePanelTarget","lastChild","textContent","iconText","parentNode","onClosePanel","View","map","item","classPanel","classesIconClose","onClick","chooseHour","chooseMinute","i","push","hourOpeningInit","Date","getHours","minuteOpeningInit","getMinutes","hourClosingInit","minuteClosingInit","CurrentTime","props","showSetTime","isShowSetTimeClosing","onShowSetTime","Function","prototype","onShowSetTimeClosing","toGetTimeFromPanel","toGetTimeClosing","flagClosing","hour","minute","nowDate","setNowDate","isClassHour","setClassHour","isClassMinute","setClassMinute","isCloseChooseHour","setCloseChooseHour","isCloseChooseMinute","setCloseChooseMinute","hourClosing","minuteClosing","isTimeClosing","setTimeClosing","hourClosingToShowAtMenu","minuteClosingToShowAtMenu","useEffect","newObj","newObjClose","onChooseHour","onChooseMinute","onCloseChooseHour","onCloseChooseMinute","classesShowChooseTime","classesCloseChooseHour","classesCloseChooseMinute","classesForClock","showHour","showMinute","index","classesItem","String","ControlPanel","toGetDataFromPanel","toGetNotifyPerson","isQualities","setQualities","isStand","setStand","isSelectTG","setSelectTG","isSelectPriority","setSelectPriority","isSelectEffect","setSelectEffect","isEven","setEven","sokolov","balamutin","zalygin","novak","suprun","isNotifyPerson","setNotifyPerson","setNameAction","setShowSetTime","setShowSetTimeClosing","onChangeInput","onCheckBox","FormToSummary","classesOpen","classesNotify","classesClose","buttonTitle","classesButton","buttonTitleClosing","classesButtonClosing","classesForLabelCountry","classesForLabelStand","classesForLabelTg","length","classesForLabelPriority","classesForLabelEffect","classesForNotifyPersonEven","classesForNotifyPersonEdd","htmlFor","isClearable","onChange","options","placeholder","noOptionsMessage","isMulti","type","checked","CardItem","flagOpening","isDataForCard","Object","isTimeForCard","isTimeForClosing","onCheckInside","isInside","getProblemForAllCards","isProblemForAllCards","getOpsNumberForAllCards","isOpsNumberAllCards","getWhoNotify","isWhoNotifyForClosing","toGetDataNotes","toGetDurationIncident","toNotesClosingOut","isCopyOpening","isCopyClosing","toGetAlert","toCopyTable","navigator","clipboard","writeText","document","execCommand","isChooseInside","setChooseInside","isOpsNumber","setOpsNumber","isProblem","setProblem","isNotes","setNotes","isWhoNotify","setWhoNotify","isNotesClosing","setNotesClosing","isWarning","setWarning","isPrimary","setPrimary","isInputHourForClosing","setInputHourForClosing","isInputMinuteForClosing","setInputMinuteForClosing","tgOut","onWriteInput","Number","classesForCheckBox","classesForCardInside","classesForLabelInput","inside","classesIfWarning","classesIfPrimary","onChooseInside","onWarningForOps","ViewOpening","onBlur","ViewClosing","ViewTmeClosing","NotifyPerson","Array","toGetNotesForPerson","isCopyNotify","pre","priorityOut","effectOut","UpdateCard","toGetDataUpdate","isCopyUpdate","isNotesUpdate","setNotesUpdate","Alert","isAlert","classesForShowAlert","CardsList","toGetFlagInside","toGetDataProblem","toGetDataWhoNotify","toGetDataOPS","toGetPerson","setInside","setProblemForAllCards","setOpsNumberAllCards","setWhoNotifyForClosing","setAlert","timerId","setTimeout","clearTimeout","flag","text","num","txt","GeneratorTxtOut","flagUpdate","flagNotify","isFlagInside","isDataProblem","isDataWhoNotify","isDataNotes","isDataOps","isPerson","isNotesForPerson","isUpdate","isClosingTime","isNotesClosingOut","toGetCopyOpeningFromTable","toGetCopyClosingFromTable","toGetCopyNotifyFromTable","toGetCopyUpdateFromTable","isOpeningOut","setOpeningOut","isClosingOut","setClosingOut","isUpdateOut","setUpdateOut","isNotifyOut","setNotifyOut","tgForTable","undefined","arr","forEach","join","standOut","qualitiesOut","hourClosingOut","minuteClosingOut","strOpening","strClosing","strNotify","strUpdate","isForm","Table","toToggleShowTable","isToggleShowTable","classesForShowTable","Main","setDataForCard","setTimeForCard","setTimeForClosing","setToggleShowTable","setFlagInside","setDataProblem","setDataWhoNotify","setDataNotes","setDataOps","setPerson","setNotesForPerson","setUpdate","setClosingTime","setNotesClosingOut","setCopyOpening","setCopyClosing","setCopyNotify","setCopyUpdate","body","style","overflow","obj","str","Footer","getFullYear","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"mWAMA,I,yDCLeA,ECCA,WACX,OACI,qBAAKC,UAAU,4BAAf,SACI,sBAAKA,UAAU,cAAf,UACI,mBAAGC,KAAK,KAAKD,UAAU,aAAvB,kBACA,oBAAIE,GAAG,aAAaF,UAAU,6BAA9B,SACI,6BAAI,mBAAGC,KAAK,uDAAuDE,OAAO,SAASC,IAAI,aAAnF,8E,qBCgLTC,EAxLK,CAChBC,QAAS,CACL,CACIC,KAAM,YACNC,KAAM,oDAEV,CACID,KAAM,uBACNC,KAAM,gEAEV,CACID,KAAM,eACNC,KAAM,qDAIdC,GAAI,CACA,CACIC,MAAO,kCACPC,MAAO,mCAEX,CACID,MAAO,iGACPC,MAAO,kGAEX,CACID,MAAO,4EACPC,MAAO,6EAEX,CACID,MAAO,qBACPC,MAAO,sBAEX,CACID,MAAO,qBACPC,MAAO,sBAEX,CACID,MAAO,+DACPC,MAAO,gEAEX,CACID,MAAO,kFACPC,MAAO,mFAEX,CACID,MAAO,6CACPC,MAAO,8CAEX,CACID,MAAO,2BACPC,MAAO,4BAEX,CACID,MAAO,0GACPC,MAAO,2GAEX,CACID,MAAO,iCACPC,MAAO,kCAEX,CACID,MAAO,+DACPC,MAAO,gEAEX,CACID,MAAO,2BACPC,MAAO,4BAEX,CACID,MAAO,4EACPC,MAAO,6EAEX,CACID,MAAO,eACPC,MAAO,gBAEX,CACID,MAAO,iCACPC,MAAO,kCAEX,CACID,MAAO,iCACPC,MAAO,kCAEX,CACID,MAAO,qEACPC,MAAO,sEAEX,CACID,MAAO,2BACPC,MAAO,6BAIfC,SAAU,CACN,CACIF,MAAO,qEACPC,MAAO,sEAEX,CACID,MAAO,6CACPC,MAAO,8CAEX,CACID,MAAO,6CACPC,MAAO,+CAIfE,OAAQ,CAEJ,CACIH,MAAO,mDACPC,MAAO,oDAEX,CACID,MAAO,yDACPC,MAAO,0DAEX,CACID,MAAO,yDACPC,MAAO,0DAEX,CACID,MAAO,gEACPC,MAAO,kEAIfG,UAAW,CACP,CACIJ,MAAO,mDACPC,MAAO,iHAEX,CACID,MAAO,+DACPC,MAAO,gEAEX,CACID,MAAO,yDACPC,MAAO,2DAIfI,MAAO,CACH,CACIL,MAAO,2BACPC,MAAO,4BAEX,CACID,MAAO,2BACPC,MAAO,4BAEX,CACID,MAAO,sDACPC,MAAO,sDAIfK,aAAc,CACV,CACIR,KAAM,UACNS,SAAU,oBAEd,CACIT,KAAM,YACNS,SAAU,WAEd,CACIT,KAAM,UACNS,SAAU,gBAEd,CACIT,KAAM,QACNS,SAAU,eAEd,CACIT,KAAM,SACNS,SAAU,cCjJPC,G,MA7BU,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,cACvB,GADsD,EAAhBC,WACJC,mBAAS,OAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAsCF,mBAAS,MAA/C,mBAAOG,EAAP,KAAqBC,EAArB,KAiBA,OACI,cAAC,EAAD,CACIC,gBAjBgB,SAAAC,GACpB,IAAMC,EAAkBD,EAAMxB,OAAO0B,UAAUC,YACzCC,EAAWJ,EAAMxB,OAAO6B,WAAWH,UAAUC,YAEnDP,EAAaK,GACbH,EAAcM,GAEa,MAAvBH,EAAgB,GAAYT,EAAcY,GACzCZ,EAAcS,IAUfN,UAAWA,EACXE,aAAcA,EACdS,aATa,WACjBd,EAAc,WAehBe,EAAO,SAAC,GAA8D,IAA7DR,EAA4D,EAA5DA,gBAAiBJ,EAA2C,EAA3CA,UAAWE,EAAgC,EAAhCA,aAAcS,EAAkB,EAAlBA,aAErD,OACI5B,EAAYC,QAAQ6B,KAAI,SAAAC,GACpB,IAAIC,EAAa,uBACbC,EAAmB,OAOvB,OALIF,EAAK5B,OAASc,GAAac,EAAK5B,OAASgB,IACzCa,GAA0B,wBAC1BC,EAAmB,6CAInB,qBAEItC,UAAWqC,EACXE,QAAS,SAACZ,GAAD,OAAWD,EAAgBC,IAHxC,UAKI,sBAAK3B,UAAU,2CAAf,UAA0D,mBACpDA,UAAU,iBAD0C,SACxBoC,EAAK7B,OAClC6B,EAAK5B,QAEV,mBACIR,UAAWsC,EACXC,QAASN,EAFb,qBARKG,EAAK5B,UCjDfU,ILETsB,G,MAAa,IACbC,EAAe,GAEZC,EAAI,EAAGA,EAAI,GAAIA,IAChBA,EAAI,IACJF,EAAWG,KAAX,WAAoBD,IACpBD,EAAaE,KAAb,WAAsBD,KACfA,EAAI,IACXF,EAAWG,KAAKD,GAChBD,EAAaE,KAAKD,IACfD,EAAaE,KAAKD,GAI7B,IAAME,GAAkB,IAAIC,MAAOC,WAC7BC,GAAoB,IAAIF,MAAOG,aAG/BC,GAAkB,IAAIJ,MAAOC,WAC7BI,GAAoB,IAAIL,MAAOG,aAqNtBG,EAnNK,SAACC,GACjB,MAQIA,EAPAC,mBADJ,WAQID,EANAE,4BAFJ,WAQIF,EALAG,qBAHJ,MAGoBC,SAASC,UAH7B,IAQIL,EAJAM,4BAJJ,MAI2BF,SAASC,UAJpC,IAQIL,EAHAO,0BALJ,MAKyBH,SAASC,UALlC,IAQIL,EAFAQ,wBANJ,MAMuBJ,SAASC,UANhC,IAQIL,EADAS,mBAPJ,SAUA,EAA8BxC,mBAAS,CAACyC,KAAMlB,EAAiBmB,OAAQhB,IAAvE,mBAAOiB,EAAP,KAAgBC,EAAhB,KACA,EAAoC5C,mBAAS,MAA7C,mBAAO6C,EAAP,KAAoBC,EAApB,KACA,EAAwC9C,mBAAS,MAAjD,mBAAO+C,EAAP,KAAsBC,EAAtB,KACA,EAAgDhD,oBAAS,GAAzD,mBAAOiD,EAAP,KAA0BC,EAA1B,KACA,EAAoDlD,oBAAS,GAA7D,mBAAOmD,EAAP,KAA4BC,EAA5B,KACA,EAAwCpD,mBAAS,CAACqD,YAAazB,EAAiB,EAAG0B,cAAezB,IAAlG,mBAAO0B,EAAP,KAAsBC,EAAtB,KAGIf,EAAOE,EAAQF,KACfC,EAASC,EAAQD,OAGjBe,EAA0BF,EAAcF,YACxCK,EAA4BH,EAAcD,cA8J9C,OAtGAK,qBAAU,WACN,GAAIlB,EAAO,IAAsB,kBAATA,EAAmB,CACvC,IAAImB,EAAM,2BACHjB,GADG,IAENF,KAAK,IAAD,OAAMA,KAEdG,EAAWgB,GAGf,GAAKlB,EAAS,IAAwB,kBAAXA,GAAyBA,EAAS,GAAK,CAC9D,IAAIkB,EAAM,2BACHjB,GADG,IAENF,KAAK,IAAD,OAAMA,GACVC,OAAO,IAAD,OAAMA,KAEhBE,EAAWgB,GAGf,GAAKlB,EAAS,IAAwB,kBAAXA,GAAyBD,GAAQ,GAAK,CAC7D,IAAImB,EAAM,2BACHjB,GADG,IAEND,OAAO,IAAD,OAAMA,KAEhBE,EAAWgB,MAYhB,IAICD,qBAAU,WACN,GAAIF,EAA0B,IAAyC,kBAA5BA,EAAsC,CAC7E,IAAII,EAAW,2BACRN,GADQ,IAEXF,YAAY,IAAD,OAAMZ,EAAM,KAE3Be,EAAeK,GAGnB,GAAKH,EAA4B,IAA2C,kBAA9BA,GAA4CD,EAA0B,GAAK,CACrH,IAAII,EAAW,2BACRN,GADQ,IAEXF,YAAY,IAAD,OAAMZ,EAAM,GACvBa,cAAc,IAAD,OAAMZ,KAEvBc,EAAeK,GAGnB,GAAKH,EAA4B,IAAwB,kBAAXhB,GAAyBe,GAA2B,GAAK,CACnG,IAAII,EAAW,2BACRN,GADQ,IAEXD,cAAc,IAAD,OAAMZ,KAEvBc,EAAeK,MAGpB,IAMPF,qBAAU,YACF3B,GAAeC,KACfiB,GAAmB,GACnBE,GAAqB,MAE1B,CAACpB,EAAaC,IAGjB0B,qBAAU,WACFV,GAAqBE,GAAqBjB,MAE/C,CAACe,EAAmBE,IAGvBQ,qBAAU,WACFV,GAAqBE,GAAqBd,MAE/C,CAACY,EAAmBE,IAGvBQ,qBAAU,WACNrB,EAAmBK,KAEpB,CAACA,IAGJgB,qBAAU,WACNpB,EAAiBgB,KAElB,CAACA,IAGA,cAAC,EAAD,CACId,KAAMA,EACNC,OAAQA,EACRe,wBAAyBA,EACzBC,0BAA2BA,EAI3B1B,YAAaA,EACbC,qBAAsBA,EAEtB6B,aAxKa,SAACxD,GAClB,MAAiCA,EAAMxB,OAAhCH,EAAP,EAAOA,UAAW8B,EAAlB,EAAkBA,YAElB,GAAI+B,GAA6B,sBAAd7D,EAAmC,CAClD,IAAIiF,EAAM,2BACHL,GADG,IAENF,YAAa5C,IAEjB+C,EAAeI,GACfd,EAAarC,GAGjB,IAAK+B,GAA6B,sBAAd7D,EAAmC,CACnD,IAAIiF,EAAM,2BACHjB,GADG,IAENF,KAAMhC,IAEVmC,EAAWgB,GACXd,EAAarC,KAuJbsD,eAnJe,SAACzD,GACpB,MAAiCA,EAAMxB,OAAhCH,EAAP,EAAOA,UAAW8B,EAAlB,EAAkBA,YAElB,GAAI+B,GAA6B,sBAAd7D,EAAmC,CAClD,IAAIiF,EAAM,2BACHL,GADG,IAEND,cAAe7C,IAEnB+C,EAAeI,GACfZ,EAAevC,GAGnB,IAAK+B,GAA6B,sBAAd7D,EAAmC,CACnD,IAAIiF,EAAM,2BACHjB,GADG,IAEND,OAAQjC,IAEZmC,EAAWgB,GACXZ,EAAevC,KAmIfoC,YAAaA,EACbE,cAAeA,EAEfiB,kBAlIkB,WACtBd,GAAmB,IAkIfe,oBA/HoB,WACxBb,GAAqB,IAgIjBH,kBAAmBA,EACnBE,oBAAqBA,EAErBX,YAAaA,KAOnB3B,EAAO,SAACkB,GACV,IACIU,EAoBAV,EApBAU,KACAC,EAmBAX,EAnBAW,OAEAe,EAiBA1B,EAjBA0B,wBACAC,EAgBA3B,EAhBA2B,0BAGA1B,EAaAD,EAbAC,YACAC,EAYAF,EAZAE,qBACAY,EAWAd,EAXAc,YACAE,EAUAhB,EAVAgB,cACAE,EASAlB,EATAkB,kBACAE,EAQApB,EARAoB,oBAEAW,EAMA/B,EANA+B,aACAC,EAKAhC,EALAgC,eACAC,EAIAjC,EAJAiC,kBACAC,EAGAlC,EAHAkC,oBAKAC,EAAwB,QACxBlC,GAAeC,KAAsBiC,EAAwB,gBAC5DlC,GAAeC,IAAyBkB,IAAwBF,IAAmBiB,EAAwB,0CAEhH,IAAIC,EAAyB,OACxBlB,IAAmBkB,EAAyB,wBAEjD,IAAIC,EAA2B,OAC1BjB,IAAqBiB,EAA2B,wBAErD,IAAIC,EAAkB,8CAClBC,EAAW7B,EACX8B,EAAa7B,EASjB,OAvBIX,EADAS,cAkBA8B,EAAWb,EACXc,EAAab,EAEbW,EAAkB,8CAIlB,qCACI,sBAAK1F,UAAW0F,EAAhB,UACI,+BAAOC,IACP,qCACA,+BAAOC,OAGX,sBAAK5F,UAAWuF,EAAhB,UACI,sBACIvF,UAAWwF,EACXjD,QAAS,SAACZ,GAAD,OAAWwD,EAAaxD,IAFrC,UAII,mBACI3B,UAAU,uDACVuC,QAAS8C,EAFb,mBAIA,qBAAKrF,UAAU,qBAAf,sCACA,sBAAKA,UAAU,qBAAf,UACI,qBAAKA,UAAU,6CAAf,SAEQwC,EAAWL,KAAI,SAACC,EAAMyD,GAClB,IAAIC,EAAc,oBAGlB,OAFI1D,IAAS8B,IAAa4B,GAA4B,4BAElDD,EAAQ,GAEJ,qBAEI7F,UAAW8F,EAFf,SAGEC,OAAO3D,IAFAyD,GAIH,UAK1B,qBAAK7F,UAAU,6CAAf,SAEQwC,EAAWL,KAAI,SAACC,EAAMyD,GAClB,IAAIC,EAAc,oBAGlB,OAFIC,OAAO3D,KAAU8B,IAAa4B,GAA4B,4BAE1DD,EAAQ,GAAKA,EAAQ,GAEjB,qBAEI7F,UAAW8F,EAFf,SAGE1D,GAFOyD,GAIH,UAK1B,qBAAK7F,UAAU,qBAAf,SAEQwC,EAAWL,KAAI,SAACC,EAAMyD,GAClB,IAAIC,EAAc,oBAGlB,OAFIC,OAAO3D,KAAU8B,IAAa4B,GAA4B,4BAE1DD,EAAQ,GAEJ,qBAEI7F,UAAW8F,EAFf,SAGE1D,GAFOyD,GAIH,gBAOlC,sBACI7F,UAAWyF,EACXlD,QAAS,SAACZ,GAAD,OAAWyD,EAAezD,IAFvC,UAII,mBACI3B,UAAU,uDACVuC,QAAS+C,EAFb,mBAIA,qBAAKtF,UAAU,qBAAf,kDACA,sBAAKA,UAAU,qBAAf,UACI,qBAAKA,UAAU,6CAAf,SAEQyC,EAAaN,KAAI,SAACC,EAAMyD,GACpB,IAAIC,EAAc,oBAGlB,OAFI1D,IAASgC,IAAe0B,GAA4B,4BAEpDD,EAAQ,GAEJ,qBAEI7F,UAAW8F,EAFf,SAGEC,OAAO3D,IAFAyD,GAIH,UAK1B,qBAAK7F,UAAU,6CAAf,SAEQyC,EAAaN,KAAI,SAACC,EAAMyD,GACpB,IAAIC,EAAc,oBAGlB,OAFIC,OAAO3D,KAAUgC,IAAe0B,GAA4B,4BAE5DD,EAAQ,GAAKA,EAAQ,GAEjB,qBAEI7F,UAAW8F,EAFf,SAGE1D,GAFOyD,GAIH,UAK1B,qBAAK7F,UAAU,6CAAf,SAEQyC,EAAaN,KAAI,SAACC,EAAMyD,GACpB,IAAIC,EAAc,oBAGlB,OAFIC,OAAO3D,KAAUgC,IAAe0B,GAA4B,4BAE5DD,EAAQ,IAAMA,EAAQ,GAElB,qBAEI7F,UAAW8F,EAFf,SAGE1D,GAFOyD,GAIH,UAK1B,qBAAK7F,UAAU,6CAAf,SAEQyC,EAAaN,KAAI,SAACC,EAAMyD,GACpB,IAAIC,EAAc,oBAGlB,OAFIC,OAAO3D,KAAUgC,IAAe0B,GAA4B,4BAE5DD,EAAQ,IAAMA,EAAQ,GAElB,qBAEI7F,UAAW8F,EAFf,SAGE1D,GAFOyD,GAIH,UAK1B,qBAAK7F,UAAU,6CAAf,SAEQyC,EAAaN,KAAI,SAACC,EAAMyD,GACpB,IAAIC,EAAc,oBAGlB,OAFIC,OAAO3D,KAAUgC,IAAe0B,GAA4B,4BAE5DD,EAAQ,IAAMA,EAAQ,GAElB,qBAEI7F,UAAW8F,EAFf,SAGE1D,GAFOyD,GAIH,UAK1B,qBAAK7F,UAAU,6CAAf,SAEQyC,EAAaN,KAAI,SAACC,EAAMyD,GACpB,IAAIC,EAAc,oBAGlB,OAFIC,OAAO3D,KAAUgC,IAAe0B,GAA4B,4BAE5DD,EAAQ,GAEJ,qBAEI7F,UAAW8F,EAFf,SAGE1D,GAFOyD,GAIH,uBMrdnC1C,I,eCoJA6C,EA9IM,SAAC5C,GAClB,IAmDqBhB,EAnDrB,EAKIgB,EAJA6C,0BADJ,MACyBzC,SAASC,UADlC,IAKIL,EAHAO,0BAFJ,MAEyBH,SAASC,UAFlC,IAKIL,EAFAQ,wBAHJ,MAGuBJ,SAASC,UAHhC,IAKIL,EADA8C,yBAJJ,MAIwB1C,SAASC,UAJjC,EAOA,EAAoCpC,mBAAS,MAA7C,mBAAO8E,EAAP,KAAoBC,EAApB,KACA,EAA4B/E,mBAAS,MAArC,mBAAOgF,EAAP,KAAgBC,EAAhB,KACA,EAAkCjF,mBAAS,MAA3C,mBAAOkF,EAAP,KAAmBC,EAAnB,KACA,EAA8CnF,mBAAS,MAAvD,mBAAOoF,EAAP,KAAyBC,EAAzB,KACA,EAA0CrF,mBAAS,MAAnD,mBAAOsF,EAAP,KAAuBC,EAAvB,KACA,EAA0BvF,oBAAS,GAAnC,mBAAOwF,EAAP,KAAeC,EAAf,KACA,EAA0CzF,mBAAS,CAC/C0F,SAAS,EACTC,WAAW,EACXC,SAAS,EACTC,OAAO,EACPC,QAAQ,IALZ,mBAAOC,EAAP,KAAuBC,EAAvB,KAQA,EAAoChG,mBAAS,IAA7C,mBAAOD,EAAP,KAAmBkG,EAAnB,KACA,EAAsCjG,oBAAS,GAA/C,mBAAOgC,EAAP,KAAoBkE,EAApB,KACA,EAAsDlG,oBAAS,GAA/D,oBAAOiC,GAAP,MAA6BkE,GAA7B,MAMMjE,GAAgB,WAClBgE,GAAgBlE,IAGdK,GAAuB,WACzB8D,IAAuBlE,KAGrBmE,GAAgB,SAAC9F,GACnBmF,GAASD,IAGPa,GAAa,SAAC/F,GAChB,IAAOnB,EAAQmB,EAAMxB,OAAdK,KACDyE,EAAM,2BACLmC,GADK,kBAEP5G,GAAQ4G,EAAe5G,KAG5B6G,EAAgBpC,IAgFpB,OA3CAD,qBAAU,WACNiB,EACI,CACInF,UAAWqF,GAAeA,EAAYxF,MACtCI,MAAOsF,GAAWA,EAAQ1F,MAC1BF,GAAI8F,GAAcA,EAClB3F,SAAU6F,GAAoBA,EAAiB9F,MAC/CE,OAAQ8F,GAAkBA,EAAehG,UAIlD,CAACwF,EAAaE,EAASE,EAAYE,EAAkBE,IAIxD3B,qBAAU,WACN,IAAIC,EAAS,GAGRA,EADD4B,EACO,2BACAO,GADA,IAEHD,QAAQ,EACRD,OAAO,IAGL,2BACCE,GADD,IAEFD,QAAQ,EACRD,OAAO,IAIfG,EAAgBpC,KAEjB,CAAC4B,IAIJ7B,qBAAU,WACNkB,EAAkBkB,KAEnB,CAACA,IAGA,sBAAKpH,UAAU,gBAAf,UACI,oBAAIA,UAAU,kCAAd,SACI,cAAC,EAAD,CACImB,cA3GM,SAACiB,GACnBkF,EAAclF,IA2GFhB,WAAYA,OAlFPgB,EAqFAhB,EAnFb,cAAC,EAAD,CACIgB,KAAMA,EAENmB,cAAeA,GACfG,qBAAsBA,GACtB+D,cAAeA,GACfC,WAAYA,GAEZtB,aAAcA,EACdE,SAAUA,EACVE,YAAaA,EACbE,kBAAmBA,EACnBE,gBAAiBA,EAEjBvD,YAAaA,EAEb8C,YAAaA,EACbE,QAASA,EACTE,WAAYA,EACZE,iBAAkBA,EAClBE,eAAgBA,EAChBrD,qBAAsBA,GACtBuD,OAAQA,EACRO,eAAgBA,EAEhBzD,mBAAoBA,EACpBC,iBAAkBA,SAgE5B+D,EAAgB,SAACvE,GACnB,IACIhB,EAyBAgB,EAzBAhB,KAEAgE,EAuBAhD,EAvBAgD,aACAE,EAsBAlD,EAtBAkD,SACAE,EAqBApD,EArBAoD,YACAE,EAoBAtD,EApBAsD,kBACAE,EAmBAxD,EAnBAwD,gBAEArD,EAiBAH,EAjBAG,cACAG,EAgBAN,EAhBAM,qBACA+D,EAeArE,EAfAqE,cACAC,EAcAtE,EAdAsE,WAEArE,EAYAD,EAZAC,YACA8C,EAWA/C,EAXA+C,YACAE,EAUAjD,EAVAiD,QACAE,EASAnD,EATAmD,WACAE,EAQArD,EARAqD,iBACAE,EAOAvD,EAPAuD,eACArD,EAMAF,EANAE,qBACAuD,EAKAzD,EALAyD,OACAO,EAIAhE,EAJAgE,eAEAzD,EAEAP,EAFAO,mBACAC,EACAR,EADAQ,iBAGAgE,EAAc,OACdC,EAAgB,OAChBC,EAAe,OAEN,qDAAT1F,IAAqBwF,EAAc,uBAC1B,iEAATxF,IAAuByF,EAAgB,uBAC9B,qDAATzF,IAAqB0F,EAAe,uBAExC,IAAIC,EAAc,kFACdC,EAAgB,YAChB3E,IACA0E,EAAc,kFACdC,GAAgC,sBAGpC,IAAIC,EAAqB,kFACrBC,EAAuB,YACvB5E,IACA2E,EAAqB,kFACrBC,GAA8C,sBAGlD,IAAIC,EAAyB,OACT,OAAhBhC,IAAsBgC,EAAyB,wBAEnD,IAAIC,EAAuB,OACX,OAAZ/B,IAAkB+B,EAAuB,wBAE7C,IAAIC,EAAoB,OACpB9B,GAAcA,EAAW+B,OAAS,IAAGD,EAAoB,wBAE7D,IAAIE,EAA0B,OACL,OAArB9B,IAA2B8B,EAA0B,wBAEzD,IAAIC,EAAwB,OACL,OAAnB7B,IAAyB6B,EAAwB,wBAErD,IAAIC,EAA6B,OAC7B5B,IAAQ4B,EAA6B,8BAEzC,IAAIC,EAA4B,OAGhC,OAFK7B,IAAQ6B,EAA4B,8BAGrC,sBAAK1I,UAAU,yBAAf,UAEI,sBAAKA,UAAW4H,EAAhB,UACI,sBAAK5H,UAAU,wBAAf,UACI,sBAAKA,UAAU,wBAAf,UACI,uBACI2I,QAAQ,QACR3I,UAAWoI,EAFf,oDAKA,cAAC,IAAD,CACIQ,aAAW,EACXpI,KAAK,QACLR,UAAU,eACV6I,SAAUvC,EACVwC,QAASzI,EAAYU,MACrBgI,YAAY,uCACZC,iBAAkB,iBAAM,gEAIhC,sBAAKhJ,UAAU,wBAAf,UACI,uBACI2I,QAAQ,UACR3I,UAAWmI,EAFf,wCAKA,cAAC,IAAD,CACIS,aAAW,EACXpI,KAAK,UACLR,UAAU,eACV6I,SAAUzC,EACV0C,QAASzI,EAAYS,UACrBiI,YAAY,2BACZC,iBAAkB,iBAAM,gEAIhC,sBAAKhJ,UAAU,wBAAf,UACI,uBACI2I,QAAQ,KACR3I,UAAWqI,EAFf,4BAKA,cAAC,IAAD,CACIY,SAAO,EACPjJ,UAAU,eACV6I,SAAUrC,EACVsC,QAASzI,EAAYI,GACrBsI,YAAY,0DACZC,iBAAkB,iBAAM,gFAKpC,sBAAKhJ,UAAU,wBAAf,UACI,sBAAKA,UAAU,wBAAf,UACI,uBACI2I,QAAQ,WACR3I,UAAWuI,EAFf,sEAKA,cAAC,IAAD,CACIK,aAAW,EACXpI,KAAK,WACLR,UAAU,eACV6I,SAAUnC,EACVoC,QAASzI,EAAYO,SACrBmI,YAAY,8DAIpB,sBAAK/I,UAAU,wBAAf,UACI,uBACI2I,QAAQ,SACR3I,UAAWwI,EAFf,0DAKA,cAAC,IAAD,CACII,aAAW,EACXpI,KAAK,SACLR,UAAU,eACV6I,SAAUjC,EACVkC,QAASzI,EAAYQ,OACrBkI,YAAY,kDAIpB,sBAAK/I,UAAU,sBAAf,UACI,wBACIE,GAAG,aACHF,UAAWgI,EACXzF,QAASgB,EAHb,SAIEwE,IAEF,cAAC,EAAD,CACI1E,YAAaA,EACbE,cAAeA,EACfI,mBAAoBA,aAMpC,sBAAK3D,UAAW6H,EAAhB,UACI,sBAAK7H,UAAU,qDAAf,UACI,qBAAKA,UAAU,8BAAf,SACI,kCACI,uBACIQ,KAAK,YACL0I,KAAK,QACLC,QAAStC,EACTlG,MAAM,OACNkI,SAAUpB,IAEd,gGAGR,qBAAKzH,UAAU,8BAAf,SACI,kCACI,uBACIQ,KAAK,YACL0I,KAAK,QACLC,SAAUtC,EACVlG,MAAM,MACNkI,SAAUpB,IAEd,+GAKZ,sBAAKzH,UAAU,gFAAf,UACI,kCACI,uBACIkJ,KAAK,WACLlJ,UAAU,YACVQ,KAAK,UACL2I,QAAS/B,EAAeL,QACxB8B,SAAUnB,IAEd,sHAGJ,kCACI,uBACIwB,KAAK,WACLlJ,UAAU,YACVQ,KAAK,YACL2I,QAAS/B,EAAeJ,UACxB6B,SAAUnB,IAEd,8IAGJ,kCACI,uBACIwB,KAAK,WACLlJ,UAAU,YACVQ,KAAK,UACL2I,QAAS/B,EAAeH,QACxB4B,SAAUnB,IAEd,sHAGJ,wBAAO1H,UAAWyI,EAAlB,UACI,uBACIS,KAAK,WACLlJ,UAAU,YACVQ,KAAK,QACL2I,QAAS/B,EAAeF,MACxB2B,SAAUnB,IAEd,4HAGJ,wBAAO1H,UAAW0I,EAAlB,UACI,uBACIQ,KAAK,WACLlJ,UAAU,YACVQ,KAAK,SACL2I,QAAS/B,EAAeD,OACxB0B,SAAUnB,IAEd,0GAKZ,qBAAK1H,UAAW8H,EAAhB,SACI,qBAAK9H,UAAU,sDAAf,SACI,sBAAKA,UAAU,sBAAf,UACI,wBACIE,GAAG,aACHF,UAAWkI,EACX3F,QAASmB,EAHb,SAIEuE,IAEF,cAAC,EAAD,CACIvE,qBAAsBA,EACtBJ,qBAAsBA,EACtBM,iBAAkBA,EAClBC,aAAa,eC1a1BmC,I,qBC+PAoD,EA5PE,SAAChG,GACd,MAuBIA,EAtBAiG,mBADJ,WAuBIjG,EApBAkG,qBAHJ,MAGoBC,OAAO9F,UAH3B,IAuBIL,EAnBAoG,qBAJJ,MAIoBD,OAAO9F,UAJ3B,IAuBIL,EAlBAqG,wBALJ,MAKuBF,OAAO9F,UAL9B,IAuBIL,EAhBAsG,qBAPJ,MAOoBlG,SAASC,UAP7B,IAuBIL,EAfAuG,gBARJ,WAuBIvG,EAdAwG,6BATJ,MAS4BpG,SAASC,UATrC,IAuBIL,EAbAyG,4BAVJ,MAU2B,KAV3B,IAuBIzG,EAZA0G,+BAXJ,MAW8BtG,SAASC,UAXvC,IAuBIL,EAXA2G,2BAZJ,MAY0B,KAZ1B,IAuBI3G,EAVA4G,oBAbJ,MAamBxG,SAASC,UAb5B,IAuBIL,EATA6G,6BAdJ,MAc4B,KAd5B,IAuBI7G,EARA8G,sBAfJ,MAeqB1G,SAASC,UAf9B,IAuBIL,EAPA+G,6BAhBJ,MAgB4B3G,SAASC,UAhBrC,IAuBIL,EANAgH,yBAjBJ,MAiBwB5G,SAASC,UAjBjC,IAuBIL,EAJAiH,qBAnBJ,MAmBoB,GAnBpB,IAuBIjH,EAHAkH,qBApBJ,MAoBoB,GApBpB,IAuBIlH,EADAmH,kBAtBJ,MAsBiB/G,SAASC,UAtB1B,EAyBM+G,EAAc,WACZnB,GAAaoB,UAAUC,UAAUC,UAAUN,GAC1ChB,GAAaoB,UAAUC,UAAUC,UAAUL,GAEhDM,SAASC,YAAY,QAErBN,KAGJ,EAA0ClJ,oBAAS,GAAnD,mBAAOyJ,EAAP,KAAuBC,EAAvB,KACA,EAAoC1J,mBAAS,IAA7C,mBAAO2J,EAAP,KAAoBC,EAApB,KACA,EAAgC5J,mBAAS,IAAzC,mBAAO6J,EAAP,KAAkBC,GAAlB,KACA,GAA4B9J,mBAAS,IAArC,qBAAO+J,GAAP,MAAgBC,GAAhB,MACA,GAAoChK,mBAAS,IAA7C,qBAAOiK,GAAP,MAAoBC,GAApB,MACA,GAA0ClK,mBAAS,IAAnD,qBAAOmK,GAAP,MAAuBC,GAAvB,MACA,GAAgCpK,oBAAS,GAAzC,qBAAOqK,GAAP,MAAkBC,GAAlB,MACA,GAAgCtK,oBAAS,GAAzC,qBAAOuK,GAAP,MAAkBC,GAAlB,MACA,GAAwDxK,mBAAS,IAAjE,qBAAOyK,GAAP,MAA8BC,GAA9B,MACA,GAA4D1K,mBAAS,IAArE,qBAAO2K,GAAP,MAAgCC,GAAhC,MAGInL,GAKAwI,EALAxI,UACAC,GAIAuI,EAJAvI,MACAN,GAGA6I,EAHA7I,GACAG,GAEA0I,EAFA1I,SACAC,GACAyI,EADAzI,OAGGiD,GAAgB0F,EAAhB1F,KAAMC,GAAUyF,EAAVzF,OACNW,GAA8B+E,EAA9B/E,YAAaC,GAAiB8E,EAAjB9E,cAGhBuH,GAAQ,KAERzL,IAAoB,IAAdA,GAAG6H,SACT4D,GAAQzL,GAAG0B,KAAI,SAAAO,GAAC,OAAIA,EAAE/B,UAGtBF,IAAMA,GAAG6H,OAAS,IAClB4D,GAAQzL,GAAG0B,KAAI,SAACO,EAAGmD,GACf,OAAIA,EAAQpF,GAAG6H,OAAS,EAAS,GAAN,OAAU5F,EAAE/B,MAAZ,MACpB+B,EAAE/B,UAIjB,IAIMwL,GAAe,SAACxK,GAClB,MAAoBA,EAAMxB,OAArBK,EAAL,EAAKA,KAAMG,EAAX,EAAWA,MAEE,QAATH,GAAkB4L,OAAOzL,IAAUA,EAAM2H,OAAS,GAAG2C,EAAatK,GACzD,QAATH,GAAmC,IAAjBG,EAAM2H,SACxBqD,IAAW,GACXE,IAAW,IAEF,QAATrL,GAAkBG,EAAM2H,OAAS,GAAGuD,IAAW,GACtC,QAATrL,GAA4B,KAAVG,GAAcsK,EAAatK,GAEpC,YAATH,GACA2K,GAAWxK,GAGF,UAATH,GACA6K,GAAS1K,GAGA,gBAATH,GACA+K,GAAa5K,GAGJ,iBAATH,GACAiL,GAAgB9K,GAGP,wBAATH,GACAuL,GAAuBpL,GAGd,0BAATH,GACAyL,GAAyBtL,IAS7B0L,GAAqB,oBACrBC,GAAuB,OACvBC,GAAuB,6BAEvBC,GAAS,KACT1B,IACA0B,GAAS,+DACTH,IAA0C,iCAC1CC,GAAuB,uCACvBC,IAA8C,SAGlD,IAAIE,GAAmB,GACnBf,KAAWe,GAAmB,iBAElC,IAAIC,GAAmB,iDAuDvB,OAtDId,KAAWc,GAAmB,4DAE9B/C,IACA6C,GAAS,+DACTF,GAAuB,cAK3BtH,qBAAU,WACN0E,EAAcoB,KAEf,CAACA,IAIJ9F,qBAAU,WACN4E,EAAsBsB,KAEvB,CAACA,IAIJlG,qBAAU,WACNgF,EAAasB,MAEd,CAACA,KAIJtG,qBAAU,WACN8E,EAAwBkB,KAEzB,CAACA,IAIJhG,qBAAU,WACNkF,EAAekB,MAEhB,CAACA,KAGJpG,qBAAU,WACNmF,EAAsB,CAACzF,YAAaoH,GAAuBnH,cAAeqH,OAE3E,CAACF,GAAuBE,KAG3BhH,qBAAU,WACNoF,EAAkBoB,MAEnB,CAACA,KAEAnC,EAEI,cAAC,EAAD,CACIvF,KAAMA,GACNC,OAAQA,GAERyI,OAAQA,GACRzL,MAAOA,GACPmL,MAAOA,GACPtL,SAAUA,GACVC,OAAQA,GACRC,UAAWA,GAEXgK,eAAgBA,EAChBI,UAAWA,EACXF,YAAaA,EACbI,QAASA,GACTE,YAAaA,GAEbqB,eAtIW,WACnB5B,GAAiBD,IAsITqB,aAAcA,GACdS,gBAhGY,SAACjL,GACPA,EAAMxB,OAAfQ,MACK2H,OAAS,GAAGqD,IAAW,IAgGzBU,mBAAoBA,GACpBC,qBAAsBA,GACtBC,qBAAsBA,GACtBE,iBAAkBA,GAClBC,iBAAkBA,GAElBlC,YAAaA,IAMrB,cAAC,EAAD,CACI1G,KAAMA,GACNC,OAAQA,GACRW,YAAaA,GACbC,cAAeA,GAEf6H,OAAQA,GACRzL,MAAOA,GACPmL,MAAOA,GACPtL,SAAUA,GACVC,OAAQA,GACRC,UAAWA,GAEXgK,eAAgBA,EAChBU,eAAgBA,GAChB3B,qBAAsBA,EACtBE,oBAAqBA,EACrB+B,sBAAuBA,GACvBE,wBAAyBA,GACzB/B,sBAAuBA,EAEvBkC,aAAcA,GAEdG,qBAAsBA,GAEtB9B,YAAaA,KAQnBqC,EAAc,SAACzJ,GACjB,IACIU,EA2BAV,EA3BAU,KACAC,EA0BAX,EA1BAW,OAEAyI,EAwBApJ,EAxBAoJ,OACAzL,EAuBAqC,EAvBArC,MACAD,EAsBAsC,EAtBAtC,UACAoL,EAqBA9I,EArBA8I,MACAtL,EAoBAwC,EApBAxC,SACAC,EAmBAuC,EAnBAvC,OAEAiK,EAiBA1H,EAjBA0H,eACAI,EAgBA9H,EAhBA8H,UACAF,EAeA5H,EAfA4H,YACAI,EAcAhI,EAdAgI,QACAE,EAaAlI,EAbAkI,YAEAqB,EAWAvJ,EAXAuJ,eACAR,EAUA/I,EAVA+I,aACAS,EASAxJ,EATAwJ,gBAEAP,EAOAjJ,EAPAiJ,mBACAC,EAMAlJ,EANAkJ,qBACAC,EAKAnJ,EALAmJ,qBACAE,EAIArJ,EAJAqJ,iBACAC,EAGAtJ,EAHAsJ,iBAEAlC,EACApH,EADAoH,YAGJ,OACI,sBAAKxK,UAAU,kCAAf,UACI,sBAAKA,UAAU,uCAAf,UAEI,sBAAKA,UAAWqM,EAAhB,UACI,sBAAKrM,UAAU,4BAAf,UACI,sBAAMA,UAAWsM,EAAjB,SAAwCE,IACxC,sBAAMxM,UAAU,aAAhB,sGAGJ,wBAAOA,UAAWuM,EAAlB,UACI,uBACIrD,KAAK,WACL1I,KAAK,SACLR,UAAU,kCACVmJ,QAAS2B,EACTjC,SAAU8D,IAEd,sGAIR,uBAAM3M,UAAU,aAAhB,UAA6B,sBAAMA,UAAU,qCAAhB,SAAsDe,IAAnF,IAAiG,sBAAMf,UAAU,YAAhB,SAA6Bc,UAGlI,qBAAKd,UAAU,cAAf,SACI,sBAAKA,UAAU,gBAAf,UAEI,cAAC,IAAD,CACIA,UAAU,gBACVW,MAAOuK,EACP1K,KAAK,UACLuI,YAAY,uGACZF,SAAUsD,IAGd,+CAAO,+BAAOD,OAEd,yFAAc,+BAAOtL,OACrB,wHAAoB,+BAAOC,OAE3B,sBAAKb,UAAU,eAAf,UACI,mBAAGA,UAAWyM,EAAd,8CACA,uBACI9L,MAAOqK,EACPxK,KAAK,MACLR,UAAW0M,EACX3D,YAAY,QACZG,KAAK,OACLL,SAAUsD,EACVW,OAAQF,OAIhB,wHAAoB,sBAAM5M,UAAU,0BAAhB,SAA0C,8BAAI8D,EAAJ,IAAWC,UAEzE,sBAAK/D,UAAU,uBAAf,UACI,qBAAKA,UAAU,6BAAf,kFACA,cAAC,IAAD,CACAA,UAAU,gBACVW,MAAO2K,EACP9K,KAAK,cACLqI,SAAUsD,OAGd,8FAEA,cAAC,IAAD,CACInM,UAAU,gBACVW,MAAOyK,EACP5K,KAAK,QACLuI,YAAY,iGACZF,SAAUsD,SAKtB,qBAAKnM,UAAU,uBAAf,SACI,wBACIA,UAAU,+DACVuC,QAASiI,EAFb,SAII,mBAAGxK,UAAU,iBAAb,kCAOd+M,EAAc,SAAC3J,GACjB,IACIU,EAwBAV,EAxBAU,KACAC,EAuBAX,EAvBAW,OACAW,EAsBAtB,EAtBAsB,YACAC,EAqBAvB,EArBAuB,cAEA6H,EAmBApJ,EAnBAoJ,OACAzL,EAkBAqC,EAlBArC,MACAD,EAiBAsC,EAjBAtC,UACAoL,EAgBA9I,EAhBA8I,MACAtL,EAeAwC,EAfAxC,SACAC,EAcAuC,EAdAvC,OAEA2K,EAYApI,EAZAoI,eACA3B,EAWAzG,EAXAyG,qBACAE,EAUA3G,EAVA2G,oBACA+B,EASA1I,EATA0I,sBACAE,EAQA5I,EARA4I,wBACA/B,EAOA7G,EAPA6G,sBAEAkC,EAKA/I,EALA+I,aAEAG,EAGAlJ,EAHAkJ,qBAEA9B,EACApH,EADAoH,YAGJ,OACI,sBAAKxK,UAAU,kCAAf,UACI,sBAAKA,UAAU,uCAAf,UAEI,sBAAKA,UAAU,4BAAf,UACI,sBAAMA,UAAWsM,EAAjB,SAAwCE,IACxC,sBAAMxM,UAAU,aAAhB,sGAGJ,uBAAMA,UAAU,aAAhB,UAA6B,+BAAOe,IAApC,IAAkD,+BAAOD,UAG7D,qBAAKd,UAAU,cAAf,SACI,sBAAKA,UAAU,sCAAf,UACI,4BAAI6J,IAEJ,+CAAO,+BAAOqC,OAEd,yFAAc,+BAAOtL,OACrB,wHAAoB,+BAAOC,OAC3B,iEAAoCkJ,KAEpC,0HAAsB,iCAAOjG,EAAP,IAAcC,KAApC,MAAqD,sBAAM/D,UAAU,yBAAhB,SAAyC,8BAAI0E,EAAJ,IAAkBC,OAAhH,KAA2I,cAAC,EAAD,CACvImH,sBAAuBA,EACvBE,wBAAyBA,EACzBG,aAAcA,IAHlB,OAMA,sGAAiB,+BAAOlC,OAExB,8FACA,cAAC,IAAD,CACIjK,UAAU,gBACVW,MAAO6K,EACPhL,KAAK,eACLuI,YAAY,iGACZF,SAAUsD,SAKtB,wBACInM,UAAU,mFACVuC,QAASiI,EAFb,SAII,mBAAGxK,UAAU,iBAAb,gCAMVgN,EAAiB,SAAC5J,GACpB,IACI0I,EAIA1I,EAJA0I,sBACAE,EAGA5I,EAHA4I,wBAEAG,EACA/I,EADA+I,aAGJ,OACI,sBAAKnM,UAAU,uBAAf,UACI,uBACIkJ,KAAK,OACLvI,MAAOmL,EACPtL,KAAK,sBACLR,UAAU,sCACV6I,SAAUsD,IANlB,uBAQI,uBACIjD,KAAK,OACLvI,MAAOqL,EACPxL,KAAK,wBACLR,UAAU,sCACV6I,SAAUsD,IAblB,2BCjdO/C,ICAA6D,G,MCEM,SAAC7J,GAClB,MAOIA,EANAgE,sBADJ,MACqB8F,MAAMzJ,UAD3B,IAOIL,EALAkG,qBAFJ,MAEoBC,OAAO9F,UAF3B,IAOIL,EAJA+J,2BAHJ,MAG0B3J,SAASC,UAHnC,IAOIL,EAFAgK,oBALJ,MAKmB,GALnB,IAOIhK,EADAmH,kBANJ,MAMiB/G,SAASC,UAN1B,EAkBI7C,EAAW,KACXC,EAAS,KACTwM,EAAM,SA0BV,MAxB+B,uEAA3B/D,EAAc1I,WAA4BA,EAAW,sEAC1B,+CAA3B0I,EAAc1I,WAAwBA,EAAW,8CACtB,+CAA3B0I,EAAc1I,WAAwBA,EAAW,8CAExB,qDAAzB0I,EAAczI,SAAuBA,EAAS,oDACrB,2DAAzByI,EAAczI,SAAwBA,EAAS,0DAElC,OAAbD,IAAmByM,EAAM,gBACZ,OAAbzM,GAAiC,OAAXC,IAAiBwM,EAAM,UAIjDrI,qBAAU,WACN,IAAIsI,EAAc,GACdC,EAAY,GAEC,OAAb3M,IAAmB0M,EAAW,WAAO1M,IAC1B,OAAXC,IAAiB0M,EAAS,WAAO1M,IAErCsM,EAAoB,0DAAD,OAAcE,GAAd,OAAoBC,GAApB,OAAkCC,EAAlC,8DAEpB,CAACF,EAAKzM,EAAUC,IAIf,sBAAKb,UAAU,0BAAf,UACI,qBAAKA,UAAU,mEAAf,SAEQoH,EAAejF,KAAI,SAAAC,GACf,OACI,sBAEIpC,UAAU,6BAFd,SAGEoC,GAFOA,QAOzB,qBAAKpC,UAAU,wCAAf,SACI,wFAAcqN,EAAd,IAAoBzM,EAApB,IAA+BC,EAA/B,+DAGJ,qBAAKb,UAAU,uBAAf,SACI,wBACIA,UAAU,+DACVuC,QAzDI,WAChBkI,UAAUC,UAAUC,UAAUyC,GAE9BxC,SAASC,YAAY,QAErBN,KAkDQ,SAII,mBAAGvK,UAAU,iBAAb,mCCxELwN,ECEI,SAACpK,GAChB,MAA2BA,EAAMkG,cAA1BvI,EAAP,EAAOA,MAAOD,EAAd,EAAcA,UAEV6I,EAKAvG,EALAuG,SADJ,EAMIvG,EAJAqK,uBAFJ,MAEsBjK,SAASC,UAF/B,IAMIL,EAFAsK,oBAJJ,MAImB,GAJnB,IAMItK,EADAmH,kBALJ,MAKiB/G,SAASC,UAL1B,EAQA,EAAwCpC,mBAAS,IAAjD,mBAAOsM,EAAP,KAAsBC,EAAtB,KAEIpB,EAAS,KACTF,EAAuB,OAEvB3C,IACA6C,EAAS,+DACTF,EAAuB,cAwB3B,OALAtH,qBAAU,WACNyI,EAAgBE,KAEjB,CAACA,IAGA,sBAAK3N,UAAU,0BAAf,UACI,sBAAKA,UAAU,uCAAf,UACI,sBAAKA,UAAU,GAAf,UACI,sBAAMA,UAAWsM,EAAjB,SAAwCE,IACxC,sBAAMxM,UAAU,aAAhB,6GAGJ,uBAAMA,UAAU,aAAhB,UAA6B,+BAAOe,IAApC,IAAkD,+BAAOD,UAE7D,qBAAKd,UAAU,cAAf,SACI,cAAC,IAAD,CACIA,UAAU,gBACVW,MAAOgN,EACPnN,KAAK,cACLuI,YAAY,YACZF,SArCW,SAAClH,GACxB,IAAKhB,EAASgB,EAAMxB,OAAfQ,MAELiN,EAAejN,QAsCX,qBAAKX,UAAU,uBAAf,SACI,wBACIA,UAAU,+DACVuC,QAtCI,WAChBkI,UAAUC,UAAUC,UAAU+C,GAE9B9C,SAASC,YAAY,QAErBN,KA+BQ,SAII,mBAAGvK,UAAU,iBAAb,kCCpEL6N,G,MCCD,SAACzK,GACX,MAEIA,EADA0K,QAGAC,EAAsB,OAG1B,YAPA,WAKaA,EAAsB,eAG/B,qBAAK7N,GAAG,kBAAkBF,UAAW+N,EAArC,SACI,qBAAK/N,UAAU,QAAf,2HCXGgO,ECOG,SAAC5K,GAEf,MAoBIA,EAnBAkG,qBADJ,MACoBC,OAAO9F,UAD3B,IAoBIL,EAlBAoG,qBAFJ,MAEoBD,OAAO9F,UAF3B,IAoBIL,EAjBAqG,wBAHJ,MAGuBF,OAAO9F,UAH9B,IAoBIL,EAhBAgE,sBAJJ,MAIqB8F,MAAMzJ,UAJ3B,IAoBIL,EAfA6K,uBALJ,MAKsBzK,SAASC,UAL/B,IAoBIL,EAdA8K,wBANJ,MAMuB1K,SAASC,UANhC,IAoBIL,EAbA+K,0BAPJ,MAOyB3K,SAASC,UAPlC,IAoBIL,EAZA8G,sBARJ,MAQqB1G,SAASC,UAR9B,IAoBIL,EAXAgL,oBATJ,MASmB5K,SAASC,UAT5B,IAoBIL,EAVAiL,mBAVJ,MAUkB7K,SAASC,UAV3B,IAoBIL,EATA+J,2BAXJ,MAW0B3J,SAASC,UAXnC,IAoBIL,EARAqK,uBAZJ,MAYsBjK,SAASC,UAZ/B,IAoBIL,EAPA+G,6BAbJ,MAa4B3G,SAASC,UAbrC,IAoBIL,EANAgH,yBAdJ,MAcwB5G,SAASC,UAdjC,IAoBIL,EAJAiH,qBAhBJ,MAgBoB,GAhBpB,IAoBIjH,EAHAkH,qBAjBJ,MAiBoB,GAjBpB,IAoBIlH,EAFAgK,oBAlBJ,MAkBmB,GAlBnB,IAoBIhK,EADAsK,oBAnBJ,MAmBmB,GAnBnB,EAsBA,EAA8BrM,oBAAS,GAAvC,mBAAOsI,EAAP,KAAiB2E,EAAjB,KACA,EAAsDjN,mBAAS,MAA/D,mBAAOwI,EAAP,KAA6B0E,EAA7B,KACA,EAAoDlN,mBAAS,MAA7D,mBAAO0I,GAAP,KAA4ByE,GAA5B,KACA,GAAwDnN,mBAAS,MAAjE,qBAAO4I,GAAP,MAA8BwE,GAA9B,MACA,GAA4BpN,oBAAS,GAArC,qBAAOyM,GAAP,MAAgBY,GAAhB,MAEMnE,GAAa,WACfmE,IAAS,IASb1J,qBAAU,WACN,IAAM2J,EAAUC,YAAW,WAN3BF,IAAS,KAMsC,KAG/C,OAAO,kBAAMG,aAAaF,MAE3B,CAACb,KAiDJ,OA7BA9I,qBAAU,WACNiJ,EAAgBtE,KAEjB,CAACA,IAGJ3E,qBAAU,WACNkJ,EAAiBrE,KAElB,CAACA,IAGJ7E,qBAAU,WACNmJ,EAAmBlE,MAEpB,CAACA,KAGJjF,qBAAU,WACNoJ,EAAarE,MAEd,CAACA,KAGJ/E,qBAAU,WACNqJ,EAAYjH,KAEb,CAACA,IAGA,sBAAKpH,UAAU,gBAAf,UACI,cAAC,EAAD,CACIsJ,cAAeA,EACfE,cAAeA,EACfE,cApDU,SAACoF,GACnBR,EAAUQ,IAoDFlF,sBAjDkB,SAACmF,GAC3BR,EAAsBQ,IAiDdjF,wBA9CoB,SAACkF,GAC7BR,GAAqBQ,IA8CbhF,aA3CS,SAACiF,GAClBR,GAAuBQ,IA2Cf/E,eAAgBA,EAEhBG,cAAeA,EAEfE,WAAYA,KAGhB,sBAAKvK,UAAU,2BAAf,UACI,cAAC,EAAD,CACIsJ,cAAeA,EACfK,SAAUA,EACV8D,gBAAiBA,EAEjBC,aAAcA,EACdnD,WAAYA,KAGhB,cAAC,EAAD,CACInD,eAAgBA,EAChBkC,cAAeA,EACf6D,oBAAqBA,EAErBC,aAAcA,EACd7C,WAAYA,QAKpB,cAAC,EAAD,CACIlB,aAAa,EAEbC,cAAeA,EACfE,cAAeA,EACfG,SAAUA,EACVE,qBAAsBA,EACtBE,oBAAqBA,GACrBN,iBAAkBA,EAClBQ,sBAAuBA,GACvBE,sBAAuBA,EACvBC,kBAAmBA,EACnBE,cAAeA,EAEfC,WAAYA,KAGhB,cAAC,EAAD,CACIuD,QAASA,SC7JVoB,ECES,SAAC9L,GACrB,MA2BIA,EA1BAiG,mBADJ,WA2BIjG,EAzBAS,mBAFJ,WA2BIT,EAxBA+L,kBAHJ,WA2BI/L,EAvBAgM,kBAJJ,WA2BIhM,EArBAkG,qBANJ,MAMoBC,OAAO9F,UAN3B,IA2BIL,EApBAoG,qBAPJ,MAOoBD,OAAO9F,UAP3B,IA2BIL,EAnBAqG,wBARJ,MAQuBF,OAAO9F,UAR9B,IA2BIL,EAjBAiM,oBAVJ,WA2BIjM,EAhBAkM,qBAXJ,MAWoB,KAXpB,IA2BIlM,EAfAmM,uBAZJ,MAYsB,KAZtB,IA2BInM,EAdAoM,mBAbJ,MAakB,KAblB,IA2BIpM,EAbAqM,iBAdJ,MAcgB,KAdhB,IA2BIrM,EAZAsM,gBAfJ,MAee,KAff,IA2BItM,EAXAuM,wBAhBJ,MAgBuB,KAhBvB,IA2BIvM,EAVAwM,gBAjBJ,MAiBe,KAjBf,IA2BIxM,EATAyM,qBAlBJ,MAkBoB,CAACnL,YAAa,GAAIC,cAAe,IAlBrD,IA2BIvB,EARA0M,yBAnBJ,MAmBwB,KAnBxB,IA2BI1M,EANAmH,kBArBJ,MAqBiB/G,SAASC,UArB1B,IA2BIL,EAJA2M,iCAvBJ,MAuBgCvM,SAASC,UAvBzC,IA2BIL,EAHA4M,iCAxBJ,MAwBgCxM,SAASC,UAxBzC,IA2BIL,EAFA6M,gCAzBJ,MAyB+BzM,SAASC,UAzBxC,IA2BIL,EADA8M,gCA1BJ,MA0B+B1M,SAASC,UA1BxC,EA8BI3C,EAKAwI,EALAxI,UACAC,EAIAuI,EAJAvI,MACAN,EAGA6I,EAHA7I,GACAG,EAEA0I,EAFA1I,SACAC,EACAyI,EADAzI,OAGJ,GAAsCQ,mBAAS,IAA/C,qBAAO8O,GAAP,MAAqBC,GAArB,MACA,GAAsC/O,mBAAS,IAA/C,qBAAOgP,GAAP,MAAqBC,GAArB,MACA,GAAoCjP,mBAAS,IAA7C,qBAAOkP,GAAP,MAAoBC,GAApB,MACA,GAAoCnP,mBAAS,IAA7C,qBAAOoP,GAAP,MAAoBC,GAApB,MAEIlE,GAAS,GACT6C,IAAc7C,GAAM,sEAGxB,IAAImE,GAAa,GACjB,QAAWC,IAAPnQ,GAA2B,OAAPA,EAAa,CACjC,IAAMoQ,GAAM,GACZpQ,EAAGqQ,SAAQ,SAAA1O,GACPyO,GAAIlO,KAAKP,EAAKzB,UAElBgQ,GAAaE,GAAIE,KAAK,MAG1B,IAAIC,GAAW,GACD,OAAVjQ,IAAgBiQ,GAAQ,UAAMjQ,IAClC,IAAIkQ,GAAe,GACD,OAAdnQ,IAAoBmQ,GAAY,WAAOnQ,IAE3C,IAAIoQ,GAAiB,GACa,KAA9BrB,EAAcnL,cAAoBwM,GAAc,UAAMrB,EAAcnL,YAApB,yBACpD,IAAIyM,GAAmB,GACa,KAAhCtB,EAAclL,gBAAsBwM,GAAgB,UAAMtB,EAAclL,cAApB,wBAExD,IAAMyM,GACF,UAAG5E,IAAH,0GAEOwE,IAFP,OAEkBC,GAFlB,yBAIO3B,EAJP,oCAKaqB,IALb,6EAOoB/P,GAPpB,uGAQ0BC,GAR1B,4CASqC4O,GATrC,uGAU0BjG,EAAc1F,KAVxC,YAUgD0F,EAAczF,QAV9D,qFAWuBwL,GAXvB,mFAaqBC,GAGnB6B,GACF,UAAG7E,IAAH,0GAEOwE,IAFP,OAEkBC,GAFlB,yBAIO3B,EAJP,oCAKaqB,IALb,6EAOoB/P,GAPpB,uGAQ0BC,GAR1B,4CASqC4O,GATrC,uGAU0BjG,EAAc1F,KAVxC,YAUgD0F,EAAczF,OAV9D,cAU0E0F,EAAiB/E,YAV3F,YAU0G+E,EAAiB9E,cAV3H,aAU6IuM,IAV7I,OAU8JC,GAV9J,0FAWuB5B,GAXvB,mFAaqBO,GAGnBwB,GACF,UAAG5B,GAAH,YACKC,GAGH4B,GACF,UAAG/E,IAAH,iHAEOwE,IAFP,OAEkBC,GAFlB,uBAIKrB,GAwBT5K,qBAAU,WACN+K,EAA0BqB,MAE3B,CAACA,KAEJpM,qBAAU,WACNgL,EAA0BqB,MAE3B,CAACA,KAEJrM,qBAAU,WACNiL,EAAyBqB,MAE1B,CAACA,KAEJtM,qBAAU,WACNkL,EAAyBqB,MAE1B,CAACA,KAGJvM,qBAAU,WACNoL,GAAcgB,MACf,CAACA,KAEJpM,qBAAU,WACNsL,GAAce,MACf,CAACA,KAEJrM,qBAAU,WACNwL,GAAae,MACd,CAACA,KAEJvM,qBAAU,WACN0L,GAAaY,MACd,CAACA,KAEJ,IAAIE,GAAS,GACThR,GAAO,GAsBX,OApBI6I,IACAmI,GAASrB,GACT3P,GAAO,WAGPqD,IACA2N,GAASnB,GACT7P,GAAO,WAGP2O,IACAqC,GAASjB,GACT/P,GAAO,UAGP4O,IACAoC,GAASf,GACTjQ,GAAO,UAIP,sBAAKR,UAAU,qBAAf,UACI,cAAC,IAAD,CACIA,UAAU,gBACVW,MAAO6Q,GACPhR,KAAMA,GACNqI,SAtFO,SAAClH,GAChB,MAAoBA,EAAMxB,OAArBK,EAAL,EAAKA,KAAMG,EAAX,EAAWA,MAEE,YAATH,GAAoB4P,GAAczP,GACzB,YAATH,GAAoB8P,GAAc3P,GACzB,WAATH,GAAmBgQ,GAAa7P,GACvB,WAATH,GAAmBkQ,GAAa/P,MAmFhC,qBAAKX,UAAU,uBAAf,SACI,wBACIA,UAAU,gFACVuC,QAnFI,WACH,YAAT/B,IAAoBiK,UAAUC,UAAUC,UAAUwF,IACzC,YAAT3P,IAAoBiK,UAAUC,UAAUC,UAAU0F,IACzC,WAAT7P,IAAmBiK,UAAUC,UAAUC,UAAU4F,IACxC,WAAT/P,IAAmBiK,UAAUC,UAAUC,UAAU8F,IACrD7F,SAASC,YAAY,QAErBN,KA0EQ,SAII,mBAAGvK,UAAU,iBAAb,kCClNLyR,G,MCID,SAACrO,GACX,MAwBIA,EAvBAsO,yBADJ,MACwBlO,SAASC,UADjC,IAwBIL,EAtBAuO,yBAFJ,WAwBIvO,EApBAkG,qBAJJ,MAIoBC,OAAO9F,UAJ3B,IAwBIL,EAnBAoG,qBALJ,MAKoBD,OAAO9F,UAL3B,IAwBIL,EAlBAqG,wBANJ,MAMuBF,OAAO9F,UAN9B,IAwBIL,EAhBAiM,oBARJ,WAwBIjM,EAdAkM,qBAVJ,MAUoB,KAVpB,IAwBIlM,EAbAmM,uBAXJ,MAWsB,KAXtB,IAwBInM,EAZAoM,mBAZJ,MAYkB,KAZlB,IAwBIpM,EAXAqM,iBAbJ,MAagB,KAbhB,IAwBIrM,EAVAsM,gBAdJ,MAce,KAdf,IAwBItM,EATAuM,wBAfJ,MAeuB,KAfvB,IAwBIvM,EARAwM,gBAhBJ,MAgBe,KAhBf,IAwBIxM,EAPAyM,qBAjBJ,MAiBoB,CAACnL,YAAa,GAAIC,cAAe,IAjBrD,IAwBIvB,EANA0M,yBAlBJ,MAkBwB,KAlBxB,IAwBI1M,EAJA2M,iCApBJ,MAoBgCvM,SAASC,UApBzC,IAwBIL,EAHA4M,iCArBJ,MAqBgCxM,SAASC,UArBzC,IAwBIL,EAFA6M,gCAtBJ,MAsB+BzM,SAASC,UAtBxC,IAwBIL,EADA8M,gCAvBJ,MAuB+B1M,SAASC,UAvBxC,EA0BA,EAA4BpC,oBAAS,GAArC,mBAAOyM,EAAP,KAAgBY,EAAhB,KAEMnE,EAAa,WACfmE,GAAS,IASb1J,qBAAU,WACN,IAAM2J,EAAUC,YAAW,WAN3BF,GAAS,KAMsC,KAG/C,OAAO,kBAAMG,aAAaF,MAE3B,CAACb,IAEJ,IAAI8D,EAAsB,OAG1B,OAFID,IAAmBC,EAAsB,eAGzC,sBACI1R,GAAG,YACHF,UAAW4R,EAFf,UAII,sBAAK5R,UAAU,UAAf,UACI,qBAAKA,UAAU,kBAAf,SACI,cAAC,EAAD,CACIqJ,aAAa,EACbC,cAAeA,EACfE,cAAeA,EAEf6F,aAAcA,EACdC,cAAeA,EACfC,gBAAiBA,EACjBC,YAAaA,EACbC,UAAWA,EAEXlF,WAAYA,EAEZwF,0BAA2BA,MAInC,sBAAK/P,UAAU,kBAAf,UACI,cAAC,EAAD,CACImP,YAAY,EACZ7F,cAAeA,EACfE,cAAeA,EACf6F,aAAcA,EACdO,SAAUA,EAEVrF,WAAYA,EAEZ2F,yBAA0BA,IAG9B,cAAC,EAAD,CACId,YAAY,EACZM,SAAUA,EACVC,iBAAkBA,EAElBpF,WAAYA,EAEZ0F,yBAA0BA,OAIlC,qBAAKjQ,UAAU,kBAAf,SACI,cAAC,EAAD,CACI6D,aAAa,EACbyF,cAAeA,EACfE,cAAeA,EACfC,iBAAkBA,EAElB4F,aAAcA,EACdC,cAAeA,EACfC,gBAAiBA,EACjBC,YAAaA,EACbC,UAAWA,EAEXI,cAAeA,EACfC,kBAAmBA,EAEnBvF,WAAYA,EAEZyF,0BAA2BA,SAKvC,qBAAKhQ,UAAU,eAAf,SACI,wBACIA,UAAU,mEACVuC,QAASmP,EAFb,SAII,mBAAG1R,UAAU,iBAAb,uBAIR,cAAC,EAAD,CACI8N,QAASA,SCvIV+D,ECKF,WAET,MAAwCxQ,mBAAS,IAAjD,mBAAOiI,EAAP,KAAsBwI,EAAtB,KACA,EAAwCzQ,mBAAS,IAAjD,mBAAOmI,EAAP,KAAsBuI,EAAtB,KACA,EAA8C1Q,mBAAS,IAAvD,mBAAOoI,EAAP,KAAyBuI,EAAzB,KACA,EAA0C3Q,mBAAS,IAAnD,mBAAO+F,EAAP,KAAuBC,EAAvB,KACA,EAAgDhG,oBAAS,GAAzD,mBAAOsQ,EAAP,KAA0BM,EAA1B,KAGA,EAAsC5Q,oBAAS,GAA/C,mBAAOgO,EAAP,KAAqB6C,EAArB,KACA,EAAwC7Q,mBAAS,MAAjD,mBAAOiO,EAAP,KAAsB6C,EAAtB,KACA,EAA4C9Q,mBAAS,MAArD,mBAAOkO,EAAP,KAAwB6C,EAAxB,KACA,EAAoC/Q,mBAAS,MAA7C,mBAAOmO,EAAP,KAAoB6C,EAApB,KACA,EAAgChR,mBAAS,MAAzC,mBAAOoO,EAAP,KAAkB6C,EAAlB,KACA,EAA8BjR,mBAAS,MAAvC,mBAAOqO,EAAP,KAAiB6C,EAAjB,KACA,EAA8ClR,mBAAS,MAAvD,mBAAOsO,EAAP,KAAyB6C,GAAzB,KACA,GAA8BnR,mBAAS,MAAvC,qBAAOuO,GAAP,MAAiB6C,GAAjB,MACA,GAAwCpR,mBAAS,CAACqD,YAAa,GAAIC,cAAe,KAAlF,qBAAOkL,GAAP,MAAsB6C,GAAtB,MACA,GAAgDrR,mBAAS,MAAzD,qBAAOyO,GAAP,MAA0B6C,GAA1B,MAGA,GAAwCtR,mBAAS,IAAjD,qBAAOgJ,GAAP,MAAsBuI,GAAtB,MACA,GAAwCvR,mBAAS,IAAjD,qBAAOiJ,GAAP,MAAsBuI,GAAtB,MACA,GAAsCxR,mBAAS,IAA/C,qBAAO+L,GAAP,MAAqB0F,GAArB,MACA,GAAsCzR,mBAAS,IAA/C,qBAAOqM,GAAP,MAAqBqF,GAArB,MAyBMrB,GAAoB,WACtBO,GAAoBN,IA8ExB,OANA3M,qBAAU,WACiB4F,SAASoI,KAAKC,MAAMC,SAAvCvB,EAAkD,SAClB,YAErC,CAACA,IAGA,qCACI,cAAC,EAAD,CACI1L,mBAzGe,SAACkN,GACxBrB,EAAeqB,IAyGPxP,mBAtGe,SAACwP,GACxBpB,EAAeoB,IAsGPvP,iBAnGa,SAACuP,GACtBnB,EAAkBmB,IAmGVjN,kBAhGc,SAACiN,GAEvB,IAAMtC,EAAM,GAEZxQ,EAAYW,aAAa8P,SAAQ,SAAA1O,GACzB+Q,EAAI/Q,EAAK5B,OAAOqQ,EAAIlO,KAAKP,EAAKnB,aAGtCoG,EAAgBwJ,MA2FZ,sBAAK7Q,UAAU,oBAAf,UACI,cAAC,EAAD,CACIsJ,cAAeA,EACfE,cAAeA,EACfC,iBAAkBA,EAClBrC,eAAgBA,EAChB6G,gBAzFQ,SAACa,GACrBoD,EAAcpD,IAyFFZ,iBArFS,SAACkF,GACtBjB,EAAeiB,IAqFHjF,mBAjFW,SAACiF,GACxBhB,EAAiBgB,IAiFLlJ,eA7EO,SAACkJ,GACpBf,EAAae,IA6EDhF,aAzEK,SAACY,GAClBsD,EAAWtD,IAyECX,YArEI,SAACwC,GACjB0B,EAAU1B,EAAIE,KAAK,OAqEP5D,oBAjEY,SAACiG,GACzBZ,GAAkBY,IAiEN3F,gBA7DQ,SAAC2F,GACrBX,GAAUW,IA6DEjJ,sBAzDc,SAACgJ,GAC3BT,GAAeS,IAyDH/I,kBArDU,SAACgJ,GACvBT,GAAmBS,IAsDP/I,cAAeA,GACfC,cAAeA,GACf8C,aAAcA,GACdM,aAAcA,KAGlB,wBACI1N,UAAU,6CACVuC,QAASmP,GAFb,SAII,mBAAG1R,UAAU,sCAAb,yBAIR,cAAC,EAAD,CACIsJ,cAAeA,EACfE,cAAeA,EACfC,iBAAkBA,EAClBkI,kBAAmBA,EAEnBtC,aAAcA,EACdC,cAAeA,EACfC,gBAAiBA,EACjBC,YAAaA,EACbC,UAAWA,EACXC,SAAUA,EACVC,iBAAkBA,EAClBC,SAAUA,GACVC,cAAeA,GACfC,kBAAmBA,GAEnB4B,kBAAmBA,GAEnB3B,0BAnFsB,SAACqD,GAC/BR,GAAeQ,IAmFPpD,0BAhFsB,SAACoD,GAC/BP,GAAeO,IAgFPnD,yBA7EqB,SAACmD,GAC9BN,GAAcM,IA6ENlD,yBA1EqB,SAACkD,GAC9BL,GAAcK,UC1HPC,ECDA,WACX,OACI,wBAAQrT,UAAU,iCAAlB,SACI,qBAAKA,UAAU,mBAAf,SACI,sBAAKA,UAAU,YAAf,wBACY,IAAI6C,MAAOyQ,cACnB,mBAAGtT,UAAU,iCAAiCC,KAAK,oEAAoEE,OAAO,SAASC,IAAI,aAA3I,gC,MCWLmT,IChBAA,EDKf,WAEI,OACI,qCACI,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,QEPZC,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJ9I,SAAS+I,eAAe,W","file":"static/js/main.27ffe754.chunk.js","sourcesContent":["import {useEffect, useState} from \"react\";\nimport './currentTime.css';\n\nconst chooseHour = [];\nconst chooseMinute = [];\n\nfor (let i = 0; i < 60; i++) {\n    if (i < 10) {\n        chooseHour.push(`0${i}`)\n        chooseMinute.push(`0${i}`)\n    } else if (i < 24) {\n        chooseHour.push(i)\n        chooseMinute.push(i)\n    } else chooseMinute.push(i)\n}\n\n// Инициализация времени открытия\nconst hourOpeningInit = new Date().getHours()\nconst minuteOpeningInit = new Date().getMinutes()\n\n// Инициализация времени закрытия\nconst hourClosingInit = new Date().getHours()\nconst minuteClosingInit = new Date().getMinutes()\n\nconst CurrentTime = (props) => {\n    const {\n        showSetTime = false,\n        isShowSetTimeClosing = false,\n        onShowSetTime = Function.prototype,\n        onShowSetTimeClosing = Function.prototype,\n        toGetTimeFromPanel = Function.prototype,\n        toGetTimeClosing = Function.prototype,\n        flagClosing = false\n    } = props;\n\n    const [nowDate, setNowDate] = useState({hour: hourOpeningInit, minute: minuteOpeningInit});\n    const [isClassHour, setClassHour] = useState(null)\n    const [isClassMinute, setClassMinute] = useState(null)\n    const [isCloseChooseHour, setCloseChooseHour] = useState(false)\n    const [isCloseChooseMinute, setCloseChooseMinute] = useState(false)\n    const [isTimeClosing, setTimeClosing] = useState({hourClosing: hourClosingInit +1, minuteClosing: minuteClosingInit})\n\n    // Время открытия\n    let hour = nowDate.hour,\n        minute = nowDate.minute;\n\n    // Время закрытия\n    let hourClosingToShowAtMenu = isTimeClosing.hourClosing,\n        minuteClosingToShowAtMenu = isTimeClosing.minuteClosing;\n\n    const onChooseHour = (event) => {\n        const {className, textContent} = event.target;\n\n        if (flagClosing && className === 'choose-time__item') {\n            let newObj = {\n                ...isTimeClosing,\n                hourClosing: textContent\n            }\n            setTimeClosing(newObj)\n            setClassHour(textContent)\n        }\n\n        if (!flagClosing && className === 'choose-time__item') {\n            let newObj = {\n                ...nowDate,\n                hour: textContent\n            }\n            setNowDate(newObj)\n            setClassHour(textContent)\n        }\n    };\n\n    const onChooseMinute = (event) => {\n        const {className, textContent} = event.target;\n\n        if (flagClosing && className === 'choose-time__item') {\n            let newObj = {\n                ...isTimeClosing,\n                minuteClosing: textContent\n            }\n            setTimeClosing(newObj)\n            setClassMinute(textContent)\n        }\n\n        if (!flagClosing && className === 'choose-time__item') {\n            let newObj = {\n                ...nowDate,\n                minute: textContent\n            }\n            setNowDate(newObj)\n            setClassMinute(textContent)\n        }\n    };\n\n    const onCloseChooseHour = () => {\n        setCloseChooseHour(true)\n    };\n\n    const onCloseChooseMinute = () => {\n        setCloseChooseMinute(true)\n    };\n\n    //componentDidMount\n    // Инициализация времени открытия\n    useEffect(() => {\n        if (hour < 10 && typeof hour === 'number') {\n            let newObj = {\n                ...nowDate,\n                hour: `0${hour}`\n            }\n            setNowDate(newObj)\n        }\n\n        if ((minute < 10 && typeof minute === 'number') && (minute < 10)) {\n            let newObj = {\n                ...nowDate,\n                hour: `0${hour}`,\n                minute: `0${minute}`\n            }\n            setNowDate(newObj)\n        }\n\n        if ((minute < 10 && typeof minute === 'number') && (hour >= 10)) {\n            let newObj = {\n                ...nowDate,\n                minute: `0${minute}`\n            }\n            setNowDate(newObj)\n        }\n\n        // if (minute < 10 && typeof minute === 'number') {\n        //     let newObj = {\n        //         ...nowDate,\n        //         // hour: `0${hour}`,\n        //         minute: `0${minute}`\n        //     }\n        //     setNowDate(newObj)\n        // }\n    // eslint-disable-next-line\n    }, []);\n\n    // componentDidMount\n    // Инициализация времени закрытия\n        useEffect(() => {\n            if (hourClosingToShowAtMenu < 10 && typeof hourClosingToShowAtMenu === 'number') {\n                let newObjClose = {\n                    ...isTimeClosing,\n                    hourClosing: `0${hour +1}`\n                }\n                setTimeClosing(newObjClose)\n            }\n\n            if ((minuteClosingToShowAtMenu < 10 && typeof minuteClosingToShowAtMenu === 'number') && (hourClosingToShowAtMenu < 10)) {\n                let newObjClose = {\n                    ...isTimeClosing,\n                    hourClosing: `0${hour +1}`,\n                    minuteClosing: `0${minute}`\n                }\n                setTimeClosing(newObjClose)\n            }\n\n            if ((minuteClosingToShowAtMenu < 10 && typeof minute === 'number') && (hourClosingToShowAtMenu >= 10)) {\n                let newObjClose = {\n                    ...isTimeClosing,\n                    minuteClosing: `0${minute}`\n                }\n                setTimeClosing(newObjClose)\n            }\n            // eslint-disable-next-line\n        }, []);\n\n    // console.log(isTimeClosing)\n\n    //componentDidUpdate\n    // Закрывает панель выбора времени по крестикам\n    useEffect(() => {\n        if (showSetTime || isShowSetTimeClosing) {\n            setCloseChooseHour(false)\n            setCloseChooseMinute(false)\n        }\n    }, [showSetTime, isShowSetTimeClosing])\n\n    // Закрыть панель с выбором часа и минуты во вкладке открытие\n    useEffect(() => {\n        if (isCloseChooseHour && isCloseChooseMinute) onShowSetTime()\n        // eslint-disable-next-line\n    }, [isCloseChooseHour, isCloseChooseMinute])\n\n    // Закрыть панель с выбором часа и мнуты во вкладке Закрытие\n    useEffect(() => {\n        if (isCloseChooseHour && isCloseChooseMinute) onShowSetTimeClosing()\n        // eslint-disable-next-line\n    }, [isCloseChooseHour, isCloseChooseMinute])\n\n    // Поднять наерх время открытия\n    useEffect(() => {\n        toGetTimeFromPanel(nowDate)\n        // eslint-disable-next-line\n    }, [nowDate])\n\n    // Поднять наерх время закрытия\n    useEffect(() => {\n        toGetTimeClosing(isTimeClosing)\n        // eslint-disable-next-line\n    }, [isTimeClosing])\n\n    return(\n        <View\n            hour={hour}\n            minute={minute}\n            hourClosingToShowAtMenu={hourClosingToShowAtMenu}\n            minuteClosingToShowAtMenu={minuteClosingToShowAtMenu}\n            // hourClosing={hourClosing}\n            // minuteClosing={minuteClosing}\n\n            showSetTime={showSetTime}\n            isShowSetTimeClosing={isShowSetTimeClosing}\n\n            onChooseHour={onChooseHour}\n            onChooseMinute={onChooseMinute}\n\n            isClassHour={isClassHour}\n            isClassMinute={isClassMinute}\n\n            onCloseChooseHour={onCloseChooseHour}\n            onCloseChooseMinute={onCloseChooseMinute}\n\n            isCloseChooseHour={isCloseChooseHour}\n            isCloseChooseMinute={isCloseChooseMinute}\n\n            flagClosing={flagClosing}\n        />\n    )\n};\n\nexport default CurrentTime;\n\nconst View = (props) => {\n    const {\n        hour,\n        minute,\n        // hourClosing,\n        hourClosingToShowAtMenu,\n        minuteClosingToShowAtMenu,\n        // minuteClosing,\n\n        showSetTime,\n        isShowSetTimeClosing,\n        isClassHour,\n        isClassMinute,\n        isCloseChooseHour,\n        isCloseChooseMinute,\n\n        onChooseHour,\n        onChooseMinute,\n        onCloseChooseHour,\n        onCloseChooseMinute,\n\n        flagClosing\n    } = props;\n\n    let classesShowChooseTime = 'hide'\n    if (showSetTime || isShowSetTimeClosing) classesShowChooseTime = 'choose-time'\n    if ((showSetTime || isShowSetTimeClosing) && isCloseChooseMinute && !isCloseChooseHour) classesShowChooseTime = 'choose-time choose-time-without-minute'\n\n    let classesCloseChooseHour = 'hide'\n    if (!isCloseChooseHour) classesCloseChooseHour = 'choose-time__content'\n\n    let classesCloseChooseMinute = 'hide'\n    if (!isCloseChooseMinute) classesCloseChooseMinute = 'choose-time__content'\n\n    let classesForClock = 'control-panel__data blue-text text-accent-1'\n    let showHour = hour\n    let showMinute = minute\n    if (flagClosing) {\n        // showHour = hourClosing\n        showHour = hourClosingToShowAtMenu\n        showMinute = minuteClosingToShowAtMenu\n        // showMinute = minuteClosing\n        classesForClock = 'control-panel__data red-text text-accent-1'\n    }\n\n    return(\n        <>\n            <div className={classesForClock}>\n                <span>{showHour}</span>\n                <span>:</span>\n                <span>{showMinute}</span>\n            </div>\n\n            <div className={classesShowChooseTime}>\n                <div\n                    className={classesCloseChooseHour}\n                    onClick={(event) => onChooseHour(event)}\n                >\n                    <i\n                        className=\"small material-icons right choose-time__content-icon\"\n                        onClick={onCloseChooseHour}\n                    >clear</i>\n                    <div className='choose-time__title'>Часы</div>\n                    <div className=\"choose-time__elems\">\n                        <div className='choose-time__items choose-time__item-group'>\n                            {\n                                chooseHour.map((item, index) => {\n                                    let classesItem = 'choose-time__item'\n                                    if (item === isClassHour) classesItem = classesItem + ' choose-time__item-color'\n\n                                    if (index < 10) {\n                                        return(\n                                            <div\n                                                key={index}\n                                                className={classesItem}\n                                            >{String(item)}</div>\n                                        )\n                                    } else return null\n                                })\n                            }\n                        </div>\n\n                        <div className='choose-time__items choose-time__item-group'>\n                            {\n                                chooseHour.map((item, index) => {\n                                    let classesItem = 'choose-time__item'\n                                    if (String(item) === isClassHour) classesItem = classesItem + ' choose-time__item-color'\n\n                                    if (index > 9 && index < 20) {\n                                        return(\n                                            <div\n                                                key={index}\n                                                className={classesItem}\n                                            >{item}</div>\n                                        )\n                                    } else return null\n                                })\n                            }\n                        </div>\n\n                        <div className='choose-time__items'>\n                            {\n                                chooseHour.map((item, index) => {\n                                    let classesItem = 'choose-time__item'\n                                    if (String(item) === isClassHour) classesItem = classesItem + ' choose-time__item-color'\n\n                                    if (index > 19) {\n                                        return(\n                                            <div\n                                                key={index}\n                                                className={classesItem}\n                                            >{item}</div>\n                                        )\n                                    } else return null\n                                })\n                            }\n                        </div>\n                    </div>\n                </div>\n\n                <div\n                    className={classesCloseChooseMinute}\n                    onClick={(event) => onChooseMinute(event)}\n                >\n                    <i\n                        className=\"small material-icons right choose-time__content-icon\"\n                        onClick={onCloseChooseMinute}\n                    >clear</i>\n                    <div className='choose-time__title'>Минуты</div>\n                    <div className=\"choose-time__elems\">\n                        <div className='choose-time__items choose-time__item-group'>\n                            {\n                                chooseMinute.map((item, index) => {\n                                    let classesItem = 'choose-time__item'\n                                    if (item === isClassMinute) classesItem = classesItem + ' choose-time__item-color'\n\n                                    if (index < 10) {\n                                        return(\n                                            <div\n                                                key={index}\n                                                className={classesItem}\n                                            >{String(item)}</div>\n                                        )\n                                    } else return null\n                                })\n                            }\n                        </div>\n\n                        <div className='choose-time__items choose-time__item-group'>\n                            {\n                                chooseMinute.map((item, index) => {\n                                    let classesItem = 'choose-time__item'\n                                    if (String(item) === isClassMinute) classesItem = classesItem + ' choose-time__item-color'\n\n                                    if (index > 9 && index < 20) {\n                                        return(\n                                            <div\n                                                key={index}\n                                                className={classesItem}\n                                            >{item}</div>\n                                        )\n                                    } else return null\n                                })\n                            }\n                        </div>\n\n                        <div className='choose-time__items choose-time__item-group'>\n                            {\n                                chooseMinute.map((item, index) => {\n                                    let classesItem = 'choose-time__item'\n                                    if (String(item) === isClassMinute) classesItem = classesItem + ' choose-time__item-color'\n\n                                    if (index > 19 && index < 30) {\n                                        return(\n                                            <div\n                                                key={index}\n                                                className={classesItem}\n                                            >{item}</div>\n                                        )\n                                    } else return null\n                                })\n                            }\n                        </div>\n\n                        <div className='choose-time__items choose-time__item-group'>\n                            {\n                                chooseMinute.map((item, index) => {\n                                    let classesItem = 'choose-time__item'\n                                    if (String(item) === isClassMinute) classesItem = classesItem + ' choose-time__item-color'\n\n                                    if (index > 29 && index < 40) {\n                                        return(\n                                            <div\n                                                key={index}\n                                                className={classesItem}\n                                            >{item}</div>\n                                        )\n                                    } else return null\n                                })\n                            }\n                        </div>\n\n                        <div className='choose-time__items choose-time__item-group'>\n                            {\n                                chooseMinute.map((item, index) => {\n                                    let classesItem = 'choose-time__item'\n                                    if (String(item) === isClassMinute) classesItem = classesItem + ' choose-time__item-color'\n\n                                    if (index > 39 && index < 50) {\n                                        return(\n                                            <div\n                                                key={index}\n                                                className={classesItem}\n                                            >{item}</div>\n                                        )\n                                    } else return null\n                                })\n                            }\n                        </div>\n\n                        <div className='choose-time__items choose-time__item-group'>\n                            {\n                                chooseMinute.map((item, index) => {\n                                    let classesItem = 'choose-time__item'\n                                    if (String(item) === isClassMinute) classesItem = classesItem + ' choose-time__item-color'\n\n                                    if (index > 49) {\n                                        return(\n                                            <div\n                                                key={index}\n                                                className={classesItem}\n                                            >{item}</div>\n                                        )\n                                    } else return null\n                                })\n                            }\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </>\n    )\n};","import Header from \"./header\";\nexport default Header;","import './header.css'\n\nconst Header = () => {\n    return(\n        <nav className='blue-grey darken-2 header'>\n            <div className=\"nav-wrapper\">\n                <a href=\"./\" className=\"brand-logo\">DUTY</a>\n                <ul id=\"nav-mobile\" className=\"right hide-on-med-and-down\">\n                    <li><a href=\"https://jira.crpt.ru/secure/CreateIssue!default.jspa\" target=\"_blank\" rel=\"noreferrer\">Создать в JIRA</a></li>\n                </ul>\n            </div>\n        </nav>\n    )\n}\n\nexport default Header;","const DataForItem = {\n    summary: [\n        {\n            icon: 'lock_open',\n            name: 'Открытие'\n        },\n        {\n            icon: 'notifications_active',\n            name: 'Оповещение'\n        },\n        {\n            icon: 'lock_outline',\n            name: 'Закрытие',\n        }\n    ],\n\n    tg: [\n        {\n            label: 'Все ТГ',\n            value: 'Все ТГ'\n        },\n        {\n            label: 'Все ТГ, кроме Фарма',\n            value: 'Все ТГ, кроме Фарма',\n        },\n        {\n            label: 'Не определено',\n            value: 'Не определено'\n        },\n        {\n            label: 'АТП',\n            value: 'АТП'\n        },\n        {\n            label: 'БАД',\n            value: 'БАД'\n        },\n        {\n            label: 'Велосипеды',\n            value: 'Велосипеды'\n        },\n        {\n            label: 'Кресла-коляски',\n            value: 'Кресла-коляски'\n        },\n        {\n            label: 'ЛегПром',\n            value: 'ЛегПром'\n        },\n        {\n            label: 'Меха',\n            value: 'Меха'\n        },\n        {\n            label: 'Молочная продукция',\n            value: 'Молочная продукция'\n        },\n        {\n            label: 'Обувь',\n            value: 'Обувь'\n        },\n        {\n            label: 'Парфюмерия',\n            value: 'Парфюмерия'\n        },\n        {\n            label: 'Пиво',\n            value: 'Пиво'\n        },\n        {\n            label: 'Питьевая вода',\n            value: 'Питьевая вода'\n        },\n        {\n            label: 'РВ',\n            value: 'РВ'\n        },\n        {\n            label: 'Табак',\n            value: 'Табак'\n        },\n        {\n            label: 'Фарма',\n            value: 'Фарма'\n        },\n        {\n            label: 'Фототехника',\n            value: 'Фототехника'\n        },\n        {\n            label: 'Шины',\n            value: 'Шины'\n        },\n    ],\n\n    priority: [\n        {\n            label: 'Критический',\n            value: 'Критический'\n        },\n        {\n            label: 'Высокий',\n            value: 'Высокий'\n        },\n        {\n            label: 'Средний',\n            value: 'Средний',\n        },\n    ],\n\n    effect: [\n\n        {\n            label: 'Массовое',\n            value: 'Массовое'\n        },\n        {\n            label: 'Одиночное',\n            value: 'Одиночное',\n        },\n        {\n            label: 'Групповое',\n            value: 'Групповое',\n        },\n        {\n            label: 'Без влияния',\n            value: 'Без влияния'\n        },\n    ],\n\n    qualities: [\n        {\n            label: 'Беларусь',\n            value: 'Республика Беларусь'\n        },\n        {\n            label: 'Узбекистан',\n            value: 'Узбекистан',\n        },\n        {\n            label: 'Казахстан',\n            value: 'Казахстан',\n        },\n    ],\n\n    stand: [\n        {\n            label: 'Прод',\n            value: 'ПРОД'\n        },\n        {\n            label: 'Демо',\n            value: 'ДЕМО'\n        },\n        {\n            label: 'Прод + Демо',\n            value: 'ПРОД+ДЕМО'\n        },\n    ],\n\n    notifyPerson: [\n        {\n            name: 'sokolov',\n            userName: '@AndreySokolov83'\n        },\n        {\n            name: 'balamutin',\n            userName: '@dezm0d'\n        },\n        {\n            name: 'zalygin',\n            userName: '@mishanyazal'\n        },\n        {\n            name: 'novak',\n            userName: '@crpt_novak'\n        },\n        {\n            name: 'suprun',\n            userName: '@lacronn'\n        },\n    ]\n};\n\nexport default DataForItem;","import {useState} from \"react\";\nimport DataForItem from \"../../data/dataForItem\";\n\nimport './controlTitleItem.css'\n\nconst ControlTitleItem = ({getNameAction, nameAction}) => {\n    const [namePanel, setNamePanel] = useState(null);\n    const [isIconForTab, setIconForTab] = useState(null);\n\n    const onShowPanelItem = event => {\n        const namePanelTarget = event.target.lastChild.textContent;\n        const iconText = event.target.parentNode.lastChild.textContent;\n\n        setNamePanel(namePanelTarget);\n        setIconForTab(iconText);\n\n        if (namePanelTarget[0] === 'l') getNameAction(iconText)\n        else getNameAction(namePanelTarget)\n    };\n\n    const onClosePanel = () => {\n        getNameAction(null)\n    };\n\n    return(\n        <View\n            onShowPanelItem={onShowPanelItem}\n            namePanel={namePanel}\n            isIconForTab={isIconForTab}\n            onClosePanel={onClosePanel}\n        />\n    )\n};\n\nexport default ControlTitleItem;\n\nconst View = ({onShowPanelItem, namePanel, isIconForTab, onClosePanel}) => {\n\n    return(\n        DataForItem.summary.map(item => {\n            let classPanel = 'control-title__item ';\n            let classesIconClose = 'hide'\n\n            if (item.name === namePanel || item.name === isIconForTab) {\n                classPanel = classPanel + 'control-title__active';\n                classesIconClose = 'small material-icons control-title__close'\n            }\n\n            return(\n                <li\n                    key={item.name}\n                    className={classPanel}\n                    onClick={(event) => onShowPanelItem(event)}\n                >\n                    <div className=\"collapsible-header control-title__header\"><\n                        i className=\"material-icons\">{item.icon}</i>\n                        {item.name}\n                    </div>\n                    <i\n                        className={classesIconClose}\n                        onClick={onClosePanel}\n                    >clear</i>\n                </li>\n            )\n        })\n    )\n};","import ControlTitleItem from \"./controlTitleItem\";\nexport default ControlTitleItem;","import CurrentTime from \"./currentTime\";\nexport default CurrentTime;","import {useEffect, useState} from \"react\";\nimport ControlTitleItem from \"../controlTitleItem\";\nimport CurrentTime from \"../currentTime\";\nimport './controlPanel.css'\n\nimport Select from 'react-select';\nimport DataForItem from \"../../data/dataForItem\";\nconst ControlPanel = (props) => {\n    const {\n        toGetDataFromPanel = Function.prototype,\n        toGetTimeFromPanel = Function.prototype,\n        toGetTimeClosing = Function.prototype,\n        toGetNotifyPerson = Function.prototype,\n    } = props\n\n    const [isQualities, setQualities] = useState(null);\n    const [isStand, setStand] = useState(null);\n    const [isSelectTG, setSelectTG] = useState(null);\n    const [isSelectPriority, setSelectPriority] = useState(null);\n    const [isSelectEffect, setSelectEffect] = useState(null);\n    const [isEven, setEven] = useState(true);\n    const [isNotifyPerson, setNotifyPerson] = useState({\n        sokolov: true,\n        balamutin: true,\n        zalygin: true,\n        novak: true,\n        suprun: false,\n    });\n\n    const [nameAction, setNameAction] = useState('');\n    const [showSetTime, setShowSetTime] = useState(false);\n    const [isShowSetTimeClosing, setShowSetTimeClosing] = useState(false);\n\n    const getNameAction = (item) => {\n        setNameAction(item)\n    };\n\n    const onShowSetTime = () => {\n        setShowSetTime(!showSetTime)\n    };\n\n    const onShowSetTimeClosing = () => {\n        setShowSetTimeClosing(!isShowSetTimeClosing)\n    };\n\n    const onChangeInput = (event) => {\n        setEven(!isEven)\n    }\n\n    const onCheckBox = (event) => {\n        const {name} = event.target\n        const newObj = {\n            ...isNotifyPerson,\n            [name]: !isNotifyPerson[name]\n        }\n\n        setNotifyPerson(newObj)\n    }\n\n    const openControl = (item) => {\n        return(\n            <FormToSummary\n                item={item}\n\n                onShowSetTime={onShowSetTime}\n                onShowSetTimeClosing={onShowSetTimeClosing}\n                onChangeInput={onChangeInput}\n                onCheckBox={onCheckBox}\n\n                setQualities={setQualities}\n                setStand={setStand}\n                setSelectTG={setSelectTG}\n                setSelectPriority={setSelectPriority}\n                setSelectEffect={setSelectEffect}\n\n                showSetTime={showSetTime}\n\n                isQualities={isQualities}\n                isStand={isStand}\n                isSelectTG={isSelectTG}\n                isSelectPriority={isSelectPriority}\n                isSelectEffect={isSelectEffect}\n                isShowSetTimeClosing={isShowSetTimeClosing}\n                isEven={isEven}\n                isNotifyPerson={isNotifyPerson}\n\n                toGetTimeFromPanel={toGetTimeFromPanel}\n                toGetTimeClosing={toGetTimeClosing}\n            />\n        )\n    };\n\n    // componentDidUpdate\n    useEffect(() => {\n        toGetDataFromPanel(\n            {\n                qualities: isQualities && isQualities.value,\n                stand: isStand && isStand.value,\n                tg: isSelectTG && isSelectTG,\n                priority: isSelectPriority && isSelectPriority.value,\n                effect: isSelectEffect && isSelectEffect.value,\n            }\n        )\n        // eslint-disable-next-line\n    }, [isQualities, isStand, isSelectTG, isSelectPriority, isSelectEffect])\n\n    // componentDidUpdate\n    // Контролирует состояние персон оповещения в зависимости от чет/нечет\n    useEffect(() => {\n        let newObj = {}\n\n        if (isEven) {\n             newObj = {\n                ...isNotifyPerson,\n                suprun: false,\n                novak: true\n            }\n        } else {\n            newObj = {\n                ...isNotifyPerson,\n                suprun: true,\n                novak: false\n            }\n        }\n\n        setNotifyPerson(newObj)\n    // eslint-disable-next-line\n    }, [isEven])\n\n    // componentDidUpdate\n    // передать наверх данные об оповещаемых персонах\n    useEffect(() => {\n        toGetNotifyPerson(isNotifyPerson)\n    // eslint-disable-next-line\n    }, [isNotifyPerson])\n\n    return(\n        <div className='control-panel'>\n            <ul className=\"collapsible control-title__list\">\n                <ControlTitleItem\n                    getNameAction={getNameAction}\n                    nameAction={nameAction}\n                />\n            </ul>\n            {openControl(nameAction)}\n        </div>\n    )\n};\n\nexport default ControlPanel;\n\nconst FormToSummary = (props) => {\n    const {\n        item,\n\n        setQualities,\n        setStand,\n        setSelectTG,\n        setSelectPriority,\n        setSelectEffect,\n\n        onShowSetTime,\n        onShowSetTimeClosing,\n        onChangeInput,\n        onCheckBox,\n\n        showSetTime,\n        isQualities,\n        isStand,\n        isSelectTG,\n        isSelectPriority,\n        isSelectEffect,\n        isShowSetTimeClosing,\n        isEven,\n        isNotifyPerson,\n\n        toGetTimeFromPanel,\n        toGetTimeClosing\n    } = props;\n\n    let classesOpen = 'hide';\n    let classesNotify = 'hide';\n    let classesClose = 'hide';\n\n    if (item === 'Открытие') classesOpen = 'control-panel__main'\n    if (item === 'Оповещение') classesNotify = 'control-panel__main'\n    if (item === 'Закрытие') classesClose = 'control-panel__main'\n\n    let buttonTitle = 'Время открытия'\n    let classesButton = 'btn-large'\n    if (showSetTime) {\n        buttonTitle = 'Свернуть выбор'\n        classesButton = classesButton + ' btn__color-orange'\n    }\n\n    let buttonTitleClosing = 'Время закрытия'\n    let classesButtonClosing = 'btn-large'\n    if (isShowSetTimeClosing) {\n        buttonTitleClosing = 'Свернуть выбор'\n        classesButtonClosing = classesButtonClosing + ' btn__color-orange'\n    }\n\n    let classesForLabelCountry = 'hide';\n    if (isQualities !== null) classesForLabelCountry = 'control-panel__label'\n\n    let classesForLabelStand = 'hide';\n    if (isStand !== null) classesForLabelStand = 'control-panel__label'\n\n    let classesForLabelTg = 'hide';\n    if (isSelectTG && isSelectTG.length > 0) classesForLabelTg = 'control-panel__label'\n\n    let classesForLabelPriority = 'hide';\n    if (isSelectPriority !== null) classesForLabelPriority = 'control-panel__label'\n\n    let classesForLabelEffect = 'hide';\n    if (isSelectEffect !== null) classesForLabelEffect = 'control-panel__label'\n\n    let classesForNotifyPersonEven = 'hide';\n    if (isEven) classesForNotifyPersonEven = 'control-panel__footer-even'\n\n    let classesForNotifyPersonEdd = 'hide';\n    if (!isEven) classesForNotifyPersonEdd = 'control-panel__footer-even'\n\n    return (\n        <div className='control-panel__actions'>\n\n            <div className={classesOpen}>\n                <div className=\"control-panel__footer\">\n                    <div className=\"control-panel__select\">\n                        <label\n                            htmlFor='stand'\n                            className={classesForLabelStand}\n                        > Контур </label>\n\n                        <Select\n                            isClearable\n                            name='stand'\n                            className='select-react'\n                            onChange={setStand}\n                            options={DataForItem.stand}\n                            placeholder='Контур'\n                            noOptionsMessage={() => 'Не найдено'}\n                        />\n                    </div>\n\n                    <div className=\"control-panel__select\">\n                        <label\n                            htmlFor='country'\n                            className={classesForLabelCountry}\n                        > ЕАЭС </label>\n\n                        <Select\n                            isClearable\n                            name='country'\n                            className='select-react'\n                            onChange={setQualities}\n                            options={DataForItem.qualities}\n                            placeholder='ЕАЭС'\n                            noOptionsMessage={() => 'Не найдено'}\n                        />\n                    </div>\n\n                    <div className=\"control-panel__select\">\n                        <label\n                            htmlFor='tg'\n                            className={classesForLabelTg}\n                        > ТГ </label>\n\n                        <Select\n                            isMulti\n                            className='select-react'\n                            onChange={setSelectTG}\n                            options={DataForItem.tg}\n                            placeholder='Выбрать ТГ'\n                            noOptionsMessage={() => 'ТГ не найдена'}\n                        />\n                    </div>\n                </div>\n\n                <div className=\"control-panel__footer\">\n                    <div className=\"control-panel__select\">\n                        <label\n                            htmlFor='priority'\n                            className={classesForLabelPriority}\n                        > Приоритет </label>\n\n                        <Select\n                            isClearable\n                            name='priority'\n                            className='select-react'\n                            onChange={setSelectPriority}\n                            options={DataForItem.priority}\n                            placeholder='Приоритет'\n                        />\n                    </div>\n\n                    <div className=\"control-panel__select\">\n                        <label\n                            htmlFor='effect'\n                            className={classesForLabelEffect}\n                        > Влияние </label>\n\n                        <Select\n                            isClearable\n                            name='effect'\n                            className='select-react'\n                            onChange={setSelectEffect}\n                            options={DataForItem.effect}\n                            placeholder='Влияние'\n                        />\n                    </div>\n\n                    <div className=\"control-panel__time\">\n                        <button\n                            id='btnOpening'\n                            className={classesButton}\n                            onClick={onShowSetTime}\n                        >{buttonTitle}</button>\n\n                        <CurrentTime\n                            showSetTime={showSetTime}\n                            onShowSetTime={onShowSetTime}\n                            toGetTimeFromPanel={toGetTimeFromPanel}\n                        />\n                    </div>\n                </div>\n            </div>\n\n            <div className={classesNotify}>\n                <div className=\"control-panel__footer control-panel__footer-notify\">\n                    <div className='control-panel__footer-radio'>\n                        <label>\n                            <input\n                                name=\"whoNotify\"\n                                type=\"radio\"\n                                checked={isEven}\n                                value='even'\n                                onChange={onChangeInput}\n                            />\n                            <span>Чётные дни</span>\n                        </label>\n                    </div>\n                    <div className='control-panel__footer-radio'>\n                        <label>\n                            <input\n                                name=\"whoNotify\"\n                                type=\"radio\"\n                                checked={!isEven}\n                                value='odd'\n                                onChange={onChangeInput}\n                            />\n                            <span>Нечётные дни</span>\n                        </label>\n                    </div>\n                </div>\n\n                <div className=\"control-panel__footer control-panel__footer-notify control-panel__footer-even\">\n                    <label>\n                        <input\n                            type=\"checkbox\"\n                            className=\"filled-in\"\n                            name='sokolov'\n                            checked={isNotifyPerson.sokolov}\n                            onChange={onCheckBox}\n                        />\n                        <span>Андрей Соколов</span>\n                    </label>\n\n                    <label>\n                        <input\n                            type=\"checkbox\"\n                            className=\"filled-in\"\n                            name='balamutin'\n                            checked={isNotifyPerson.balamutin}\n                            onChange={onCheckBox}\n                        />\n                        <span>Анатолий Баламутин</span>\n                    </label>\n\n                    <label>\n                        <input\n                            type=\"checkbox\"\n                            className=\"filled-in\"\n                            name='zalygin'\n                            checked={isNotifyPerson.zalygin}\n                            onChange={onCheckBox}\n                        />\n                        <span>Михаил Залыгин</span>\n                    </label>\n\n                    <label className={classesForNotifyPersonEven}>\n                        <input\n                            type=\"checkbox\"\n                            className=\"filled-in\"\n                            name='novak'\n                            checked={isNotifyPerson.novak}\n                            onChange={onCheckBox}\n                        />\n                        <span>Владислав Новак</span>\n                    </label>\n\n                    <label className={classesForNotifyPersonEdd}>\n                        <input\n                            type=\"checkbox\"\n                            className=\"filled-in\"\n                            name='suprun'\n                            checked={isNotifyPerson.suprun}\n                            onChange={onCheckBox}\n                        />\n                        <span>Иван Супрун</span>\n                    </label>\n                </div>\n                </div>\n\n            <div className={classesClose}>\n                <div className=\"control-panel__footer control-panel__footer-closing\">\n                    <div className=\"control-panel__time\">\n                        <button\n                            id='btnClosing'\n                            className={classesButtonClosing}\n                            onClick={onShowSetTimeClosing}\n                        >{buttonTitleClosing}</button>\n\n                        <CurrentTime\n                            onShowSetTimeClosing={onShowSetTimeClosing}\n                            isShowSetTimeClosing={isShowSetTimeClosing}\n                            toGetTimeClosing={toGetTimeClosing}\n                            flagClosing={true}\n                        />\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n};","import ControlPanel from \"./controlPanel\";\nexport default ControlPanel;","import './cardItem.css'\nimport {useEffect, useState} from \"react\";\nimport TextareaAutosize from 'react-textarea-autosize';\n\nconst CardItem = (props) => {\n    const {\n        flagOpening = true,\n\n        isDataForCard = Object.prototype,\n        isTimeForCard = Object.prototype,\n        isTimeForClosing = Object.prototype,\n\n        onCheckInside = Function.prototype,\n        isInside = false,\n        getProblemForAllCards = Function.prototype,\n        isProblemForAllCards = null,\n        getOpsNumberForAllCards = Function.prototype,\n        isOpsNumberAllCards = null,\n        getWhoNotify = Function.prototype,\n        isWhoNotifyForClosing = null,\n        toGetDataNotes = Function.prototype,\n        toGetDurationIncident = Function.prototype,\n        toNotesClosingOut = Function.prototype,\n\n        isCopyOpening = '',\n        isCopyClosing = '',\n\n        toGetAlert = Function.prototype\n    } = props\n\n    const toCopyTable = () => {\n        if (flagOpening) navigator.clipboard.writeText(isCopyOpening)\n        if (!flagOpening) navigator.clipboard.writeText(isCopyClosing)\n\n        document.execCommand(\"copy\")\n\n        toGetAlert()\n    }\n\n    const [isChooseInside, setChooseInside] = useState(false)\n    const [isOpsNumber, setOpsNumber] = useState('')\n    const [isProblem, setProblem] = useState('')\n    const [isNotes, setNotes] = useState('')\n    const [isWhoNotify, setWhoNotify] = useState('')\n    const [isNotesClosing, setNotesClosing] = useState('')\n    const [isWarning, setWarning] = useState(false)\n    const [isPrimary, setPrimary] = useState(false)\n    const [isInputHourForClosing, setInputHourForClosing] = useState('')\n    const [isInputMinuteForClosing, setInputMinuteForClosing] = useState('')\n\n    const {\n        qualities,\n        stand,\n        tg,\n        priority,\n        effect\n    } = isDataForCard\n\n    const {hour, minute} = isTimeForCard\n    const {hourClosing, minuteClosing} = isTimeForClosing\n\n    // Обработка входящего массива с ТГ\n    let tgOut = null\n\n    if (tg && tg.length === 1) {\n        tgOut = tg.map(i => i.value)\n    }\n\n    if (tg && tg.length > 1) {\n        tgOut = tg.map((i, index) => {\n            if (index < tg.length - 1) return `${i.value}, `\n            return i.value\n        })\n    }\n\n    const onChooseInside = () => {\n        setChooseInside(!isChooseInside)\n    }\n\n    const onWriteInput = (event) => {\n        let {name, value} = event.target\n\n        if (name === 'ops' && Number(value) && value.length < 6) setOpsNumber(value)\n        if (name === 'ops' && value.length === 5) {\n            setWarning(false)\n            setPrimary(true)\n        }\n        if (name === 'ops' && value.length < 5) setPrimary(false)\n        if (name === 'ops' && value === '') setOpsNumber(value)\n\n        if (name === 'problem') {\n            setProblem(value)\n        }\n\n        if (name === 'notes') {\n            setNotes(value)\n        }\n\n        if (name === 'whoIsNotify') {\n            setWhoNotify(value)\n        }\n\n        if (name === 'notesClosing') {\n            setNotesClosing(value)\n        }\n\n        if (name === 'hourInputForClosing') {\n            setInputHourForClosing(value)\n        }\n\n        if (name === 'minuteInputForClosing') {\n            setInputMinuteForClosing(value)\n        }\n    }\n\n    const onWarningForOps = (event) => {\n        let {value} = event.target\n        if (value.length < 5) setWarning(true)\n    }\n\n    let classesForCheckBox = 'summary__checkBox'\n    let classesForCardInside = 'hide'\n    let classesForLabelInput = 'summary__chooseInsideLabel'\n\n    let inside = null\n    if (isChooseInside) {\n        inside = 'ВНУТРЕННИЙ'\n        classesForCheckBox = classesForCheckBox + ' summary__checkBox-topCheckBox'\n        classesForCardInside = 'card-title amber-text text-lighten-3'\n        classesForLabelInput = classesForLabelInput + ' mt-7'\n    }\n\n    let classesIfWarning = ''\n    if (isWarning) classesIfWarning = 'red lighten-1'\n\n    let classesIfPrimary = 'form__input orange darken-1 summary__ops-input'\n    if (isPrimary) classesIfPrimary = 'form__input summary__ops-input summary__ops-input-colors'\n\n    if (isInside) {\n        inside = 'ВНУТРЕННИЙ'\n        classesForCardInside = 'card-title'\n    }\n\n    // componentDidUpdate\n    // Поднять наверх ВНУТРЕННИЙ или нет\n    useEffect(() => {\n        onCheckInside(isChooseInside)\n    // eslint-disable-next-line\n    }, [isChooseInside])\n\n    //Передать наверх данные из поля ПРОБЛЕМА\n    // componentDidUpdate\n    useEffect(() => {\n        getProblemForAllCards(isProblem)\n    // eslint-disable-next-line\n    }, [isProblem])\n\n    //Передать наверх данные из поля КТО ОПОВЕЩЕН\n    // componentDidUpdate\n    useEffect(() => {\n        getWhoNotify(isWhoNotify)\n    // eslint-disable-next-line\n    }, [isWhoNotify])\n\n    //Передать наверх данные из поля OPS\n    // componentDidUpdate\n    useEffect(() => {\n        getOpsNumberForAllCards(isOpsNumber)\n    // eslint-disable-next-line\n    }, [isOpsNumber])\n\n\n    //Передать наверх данные из поля Примечание Открытия\n    useEffect(() => {\n        toGetDataNotes(isNotes)\n    // eslint-disable-next-line\n    }, [isNotes])\n\n    //Передать наверх длительность инцидента\n    useEffect(() => {\n        toGetDurationIncident({hourClosing: isInputHourForClosing, minuteClosing: isInputMinuteForClosing})\n        // eslint-disable-next-line\n    }, [isInputHourForClosing, isInputMinuteForClosing])\n\n    //Передать наверх примечание Закрытия\n    useEffect(() => {\n        toNotesClosingOut(isNotesClosing)\n        // eslint-disable-next-line\n    }, [isNotesClosing])\n\n    if (flagOpening) {\n        return(\n            <ViewOpening\n                hour={hour}\n                minute={minute}\n\n                inside={inside}\n                stand={stand}\n                tgOut={tgOut}\n                priority={priority}\n                effect={effect}\n                qualities={qualities}\n\n                isChooseInside={isChooseInside}\n                isProblem={isProblem}\n                isOpsNumber={isOpsNumber}\n                isNotes={isNotes}\n                isWhoNotify={isWhoNotify}\n\n                onChooseInside={onChooseInside}\n                onWriteInput={onWriteInput}\n                onWarningForOps={onWarningForOps}\n\n                classesForCheckBox={classesForCheckBox}\n                classesForCardInside={classesForCardInside}\n                classesForLabelInput={classesForLabelInput}\n                classesIfWarning={classesIfWarning}\n                classesIfPrimary={classesIfPrimary}\n\n                toCopyTable={toCopyTable}\n            />\n        )\n    }\n\n    return(\n        <ViewClosing\n            hour={hour}\n            minute={minute}\n            hourClosing={hourClosing}\n            minuteClosing={minuteClosing}\n\n            inside={inside}\n            stand={stand}\n            tgOut={tgOut}\n            priority={priority}\n            effect={effect}\n            qualities={qualities}\n\n            isChooseInside={isChooseInside}\n            isNotesClosing={isNotesClosing}\n            isProblemForAllCards={isProblemForAllCards}\n            isOpsNumberAllCards={isOpsNumberAllCards}\n            isInputHourForClosing={isInputHourForClosing}\n            isInputMinuteForClosing={isInputMinuteForClosing}\n            isWhoNotifyForClosing={isWhoNotifyForClosing}\n\n            onWriteInput={onWriteInput}\n\n            classesForCardInside={classesForCardInside}\n\n            toCopyTable={toCopyTable}\n        />\n    )\n\n};\n\nexport default CardItem;\n\nconst ViewOpening = (props) => {\n    const {\n        hour,\n        minute,\n\n        inside,\n        stand,\n        qualities,\n        tgOut,\n        priority,\n        effect,\n\n        isChooseInside,\n        isProblem,\n        isOpsNumber,\n        isNotes,\n        isWhoNotify,\n\n        onChooseInside,\n        onWriteInput,\n        onWarningForOps,\n\n        classesForCheckBox,\n        classesForCardInside,\n        classesForLabelInput,\n        classesIfWarning,\n        classesIfPrimary,\n\n        toCopyTable,\n    } = props\n\n    return(\n        <div className=\"card blue-grey darken-1 summary\">\n            <div className=\"card-content white-text summary-head\">\n\n                <div className={classesForCheckBox}>\n                    <div className=\"summary__checkbox-content\">\n                        <span className={classesForCardInside}>{inside}</span>\n                        <span className=\"card-title\">Инцидент ОТКРЫТ</span>\n                    </div>\n\n                    <label className={classesForLabelInput}>\n                        <input\n                            type=\"checkbox\"\n                            name='inside'\n                            className=\"filled-in summary__chooseInside\"\n                            checked={isChooseInside}\n                            onChange={onChooseInside}\n                        />\n                        <span>Внутренний</span>\n                    </label>\n                </div>\n\n                <span className=\"card-title\"><span className='red-text text-lighten-3 colorCoral'>{stand}</span> <span className='colorAqua'>{qualities}</span></span>\n            </div>\n\n            <div className=\"card-action\">\n                <div className=\"summary__body\">\n\n                    <TextareaAutosize\n                        className='summary__area'\n                        value={isProblem}\n                        name=\"problem\"\n                        placeholder='Описание проблемы...'\n                        onChange={onWriteInput}\n                    />\n\n                    <p>ТГ: <span>{tgOut}</span></p>\n\n                    <p>Приоритет: <span>{priority}</span></p>\n                    <p>Степень влияния: <span>{effect}</span></p>\n\n                    <div className=\"summary__ops\">\n                        <p className={classesIfWarning}>https://jira.crpt.ru/browse/OPS-</p>\n                        <input\n                            value={isOpsNumber}\n                            name='ops'\n                            className={classesIfPrimary}\n                            placeholder='00000'\n                            type=\"text\"\n                            onChange={onWriteInput}\n                            onBlur={onWarningForOps}\n                        />\n                    </div>\n\n                    <p>Время инцидента: <span className='blue-text text-accent-1'><b>{hour}:{minute}</b></span></p>\n\n                    <div className='summary__whoIsNotify'>\n                        <div className='summary__whoIsNotify-title'>Кто оповещён:</div>\n                        <TextareaAutosize\n                        className='summary__area'\n                        value={isWhoNotify}\n                        name=\"whoIsNotify\"\n                        onChange={onWriteInput}\n                    /></div>\n\n                    <p>Примечание:</p>\n\n                    <TextareaAutosize\n                        className='summary__area'\n                        value={isNotes}\n                        name=\"notes\"\n                        placeholder='Решение проблемы...'\n                        onChange={onWriteInput}\n                    />\n                </div>\n            </div>\n\n            <div className=\"txt-out__card-footer\">\n                <button\n                    className=\"btn-floating waves-effect waves-light main__action-btn-green\"\n                    onClick={toCopyTable}\n                >\n                    <i className=\"material-icons\">content_copy</i>\n                </button>\n            </div>\n        </div>\n    )\n}\n\nconst ViewClosing = (props) => {\n    const {\n        hour,\n        minute,\n        hourClosing,\n        minuteClosing,\n\n        inside,\n        stand,\n        qualities,\n        tgOut,\n        priority,\n        effect,\n\n        isNotesClosing,\n        isProblemForAllCards,\n        isOpsNumberAllCards,\n        isInputHourForClosing,\n        isInputMinuteForClosing,\n        isWhoNotifyForClosing,\n\n        onWriteInput,\n\n        classesForCardInside,\n\n        toCopyTable,\n    } = props\n\n    return(\n        <div className=\"card blue-grey darken-1 summary\">\n            <div className=\"card-content white-text summary-head\">\n\n                <div className=\"summary__checkbox-content\">\n                    <span className={classesForCardInside}>{inside}</span>\n                    <span className=\"card-title\">Инцидент ЗАКРЫТ</span>\n                </div>\n\n                <span className=\"card-title\"><span>{stand}</span> <span>{qualities}</span></span>\n            </div>\n\n            <div className=\"card-action\">\n                <div className=\"summary__body summary__body-closing\">\n                    <p>{isProblemForAllCards}</p>\n\n                    <p>ТГ: <span>{tgOut}</span></p>\n\n                    <p>Приоритет: <span>{priority}</span></p>\n                    <p>Степень влияния: <span>{effect}</span></p>\n                    <p>https://jira.crpt.ru/browse/OPS-{isOpsNumberAllCards}</p>\n\n                    <div>Время инцидента: <span>{hour}:{minute}</span> - <span className='red-text text-accent-1'><b>{hourClosing}:{minuteClosing}</b></span> (<ViewTmeClosing\n                        isInputHourForClosing={isInputHourForClosing}\n                        isInputMinuteForClosing={isInputMinuteForClosing}\n                        onWriteInput={onWriteInput}\n                    />)</div>\n\n                    <p>Кто оповещен: <span>{isWhoNotifyForClosing}</span></p>\n\n                    <p>Примечание:</p>\n                    <TextareaAutosize\n                        className='summary__area'\n                        value={isNotesClosing}\n                        name=\"notesClosing\"\n                        placeholder='Решение проблемы...'\n                        onChange={onWriteInput}\n                    />\n                </div>\n            </div>\n\n            <button\n                className=\"btn-floating waves-effect waves-light main__action-btn-green main__card-absolute\"\n                onClick={toCopyTable}\n            >\n                <i className=\"material-icons\">content_copy</i>\n            </button>\n        </div>\n    )\n}\n\nconst ViewTmeClosing = (props) => {\n    const {\n        isInputHourForClosing,\n        isInputMinuteForClosing,\n\n        onWriteInput\n    } = props\n\n    return(\n        <div className='summary__time-inputs'>\n            <input\n                type=\"text\"\n                value={isInputHourForClosing}\n                name='hourInputForClosing'\n                className='browser-default summary__time-input'\n                onChange={onWriteInput}\n            /> час.\n            <input\n                type=\"text\"\n                value={isInputMinuteForClosing}\n                name='minuteInputForClosing'\n                className='browser-default summary__time-input'\n                onChange={onWriteInput}\n            /> мин.\n        </div>\n    )\n}","import CardItem from \"./cardItem\";\nexport default CardItem;","import NotifyPerson from \"./notifyPerson\";\nexport default NotifyPerson;","import './notifyPerson.css'\nimport {useEffect} from \"react\";\n\nconst NotifyPerson = (props) => {\n    const {\n        isNotifyPerson = Array.prototype,\n        isDataForCard = Object.prototype,\n        toGetNotesForPerson = Function.prototype,\n\n        isCopyNotify = '',\n        toGetAlert = Function.prototype\n    } = props\n\n\n    const toCopyTable = () => {\n        navigator.clipboard.writeText(isCopyNotify)\n\n        document.execCommand(\"copy\")\n\n        toGetAlert()\n    }\n\n    let priority = null\n    let effect = null\n    let pre = 'о'\n\n    if (isDataForCard.priority === 'Критический') priority = 'критическом'\n    if (isDataForCard.priority === 'Высокий') priority = 'высоком'\n    if (isDataForCard.priority === 'Средний') priority = 'среднем'\n\n    if (isDataForCard.effect === 'Массовое') effect = 'массовом'\n    if (isDataForCard.effect === 'Групповое') effect = 'групповом'\n\n    if (priority === null) pre = 'об'\n    if (priority === null &&  effect !== null) pre = 'о'\n\n    //componentDidUpdate\n    //передадим наверх строку сообщения для великой четверки\n    useEffect(() => {\n        let priorityOut = ''\n        let effectOut = ''\n\n        if (priority !== null) priorityOut = ` ${priority}`\n        if (effect !== null) effectOut = ` ${effect}`\n\n        toGetNotesForPerson(`Оповещаем ${pre}${priorityOut}${effectOut} инциденте`)\n    // eslint-disable-next-line\n    }, [pre, priority, effect])\n\n\n    return(\n        <div className=\"card blue-grey darken-1\">\n            <div className=\"card-content white-text summary-head summary__notifyPerson-items\">\n                {\n                    isNotifyPerson.map(item => {\n                        return (\n                            <span\n                                key={item}\n                                className='summary__notifyPerson-item'\n                            >{item}</span>\n                        )\n                    })\n                }\n            </div>\n            <div className=\"card-action summary__notifyPerson-txt\">\n                <p>Оповещаем {pre} {priority} {effect} инциденте</p>\n            </div>\n\n            <div className=\"txt-out__card-footer\">\n                <button\n                    className=\"btn-floating waves-effect waves-light main__action-btn-green\"\n                    onClick={toCopyTable}\n                >\n                    <i className=\"material-icons\">content_copy</i>\n                </button>\n            </div>\n        </div>\n    )\n}\n\nexport default NotifyPerson;","import UpdateCard from \"./updateCard\";\nexport default UpdateCard;","import TextareaAutosize from \"react-textarea-autosize\";\nimport {useEffect, useState} from \"react\";\n\nconst UpdateCard = (props) => {\n    const {stand, qualities} = props.isDataForCard\n    const {\n        isInside,\n        toGetDataUpdate = Function.prototype,\n\n        isCopyUpdate = '',\n        toGetAlert = Function.prototype\n    } = props\n\n    const [isNotesUpdate, setNotesUpdate] = useState('')\n\n    let inside = null\n    let classesForCardInside = 'hide'\n\n    if (isInside) {\n        inside = 'ВНУТРЕННИЙ'\n        classesForCardInside = 'card-title'\n    }\n\n    const onWriteInputUpdate = (event) => {\n        let {value} = event.target\n\n        setNotesUpdate(value)\n    }\n\n    const toCopyTable = () => {\n        navigator.clipboard.writeText(isCopyUpdate)\n\n        document.execCommand(\"copy\")\n\n        toGetAlert()\n    }\n\n    //componentDidUpdate\n    //передать наверх данные из INPUT update\n    useEffect(() => {\n        toGetDataUpdate(isNotesUpdate)\n    // eslint-disable-next-line\n    }, [isNotesUpdate])\n\n    return(\n        <div className=\"card blue-grey darken-1\">\n            <div className=\"card-content white-text summary-head\">\n                <div className=\"\">\n                    <span className={classesForCardInside}>{inside}</span>\n                    <span className=\"card-title\">Инцидент в работе</span>\n                </div>\n\n                <span className=\"card-title\"><span>{stand}</span> <span>{qualities}</span></span>\n            </div>\n            <div className=\"card-action\">\n                <TextareaAutosize\n                    className='summary__area'\n                    value={isNotesUpdate}\n                    name=\"notesUpdate\"\n                    placeholder='Update...'\n                    onChange={onWriteInputUpdate}\n                />\n            </div>\n\n            <div className=\"txt-out__card-footer\">\n                <button\n                    className=\"btn-floating waves-effect waves-light main__action-btn-green\"\n                    onClick={toCopyTable}\n                >\n                    <i className=\"material-icons\">content_copy</i>\n                </button>\n            </div>\n        </div>\n    )\n}\nexport default UpdateCard","import Alert from \"./alert\";\nexport default Alert;","import './alert.css'\n\nconst Alert = (props) => {\n    const {\n        isAlert = false\n    } = props\n\n    let classesForShowAlert = 'hide'\n    if (isAlert) classesForShowAlert = 'main__alert'\n\n    return(\n        <div id=\"toast-container\" className={classesForShowAlert}>\n            <div className=\"toast\">\n                Скопировано в буфер!\n            </div>\n        </div>\n    )\n}\n\nexport default Alert;","import CardsList from \"./cardsList\";\nexport default CardsList;","import {useEffect, useState} from \"react\";\n\nimport './cardsList.css';\nimport CardItem from \"../cardItem\";\nimport NotifyPerson from \"../notifyPerson\";\nimport UpdateCard from \"../updateCard\";\nimport Alert from \"../table/alert\";\n\nconst CardsList = (props) => {\n\n    const {\n        isDataForCard = Object.prototype,\n        isTimeForCard = Object.prototype,\n        isTimeForClosing = Object.prototype,\n        isNotifyPerson = Array.prototype,\n        toGetFlagInside = Function.prototype,\n        toGetDataProblem = Function.prototype,\n        toGetDataWhoNotify = Function.prototype,\n        toGetDataNotes = Function.prototype,\n        toGetDataOPS = Function.prototype,\n        toGetPerson = Function.prototype,\n        toGetNotesForPerson = Function.prototype,\n        toGetDataUpdate = Function.prototype,\n        toGetDurationIncident = Function.prototype,\n        toNotesClosingOut = Function.prototype,\n\n        isCopyOpening = '',\n        isCopyClosing = '',\n        isCopyNotify = '',\n        isCopyUpdate = '',\n    } = props\n\n    const [isInside, setInside] = useState(false)\n    const [isProblemForAllCards, setProblemForAllCards] = useState(null)\n    const [isOpsNumberAllCards, setOpsNumberAllCards] = useState(null)\n    const [isWhoNotifyForClosing, setWhoNotifyForClosing] = useState(null)\n    const [isAlert, setAlert] = useState(false)\n\n    const toGetAlert = () => {\n        setAlert(true)\n    }\n\n    const closeAlert = () => {\n        setAlert(false)\n    }\n\n    // componentDidUpdate\n    // изчезновение алерта Скопировано в буфер\n    useEffect(() => {\n        const timerId = setTimeout(() => closeAlert(), 3000);\n\n        // componentDidUnmount\n        return () => clearTimeout(timerId)\n        // eslint-disable-next-line\n    }, [isAlert]);\n\n    const onCheckInside = (flag) => {\n        setInside(flag)\n    }\n\n    const getProblemForAllCards = (text) => {\n        setProblemForAllCards(text)\n    }\n\n    const getOpsNumberForAllCards = (num) => {\n        setOpsNumberAllCards(num)\n    }\n\n    const getWhoNotify = (txt) => {\n        setWhoNotifyForClosing(txt)\n    }\n\n    //componentDidUpdate\n    //Передать наверх состояние INSIDE\n    useEffect(() => {\n        toGetFlagInside(isInside)\n        // eslint-disable-next-line\n    }, [isInside])\n\n    //Передать наверх состояние ОПИСАНИЕ ПРОБЛЕМЫ\n    useEffect(() => {\n        toGetDataProblem(isProblemForAllCards)\n        // eslint-disable-next-line\n    }, [isProblemForAllCards])\n\n    //Передать наверх состояние кто оповещен\n    useEffect(() => {\n        toGetDataWhoNotify(isWhoNotifyForClosing)\n        // eslint-disable-next-line\n    }, [isWhoNotifyForClosing])\n\n    //Передать наверх тикет JIRA\n    useEffect(() => {\n        toGetDataOPS(isOpsNumberAllCards)\n        // eslint-disable-next-line\n    }, [isOpsNumberAllCards])\n\n    //Передать наверх Великая четверка\n    useEffect(() => {\n        toGetPerson(isNotifyPerson)\n        // eslint-disable-next-line\n    }, [isNotifyPerson])\n\n    return(\n        <div className=\"summary-forms\">\n            <CardItem\n                isDataForCard={isDataForCard}\n                isTimeForCard={isTimeForCard}\n                onCheckInside={onCheckInside}\n                getProblemForAllCards={getProblemForAllCards}\n                getOpsNumberForAllCards={getOpsNumberForAllCards}\n                getWhoNotify={getWhoNotify}\n                toGetDataNotes={toGetDataNotes}\n\n                isCopyOpening={isCopyOpening}\n\n                toGetAlert={toGetAlert}\n            />\n\n            <div className=\"summary summary__helpers\">\n                <UpdateCard\n                    isDataForCard={isDataForCard}\n                    isInside={isInside}\n                    toGetDataUpdate={toGetDataUpdate}\n\n                    isCopyUpdate={isCopyUpdate}\n                    toGetAlert={toGetAlert}\n                />\n\n                <NotifyPerson\n                    isNotifyPerson={isNotifyPerson}\n                    isDataForCard={isDataForCard}\n                    toGetNotesForPerson={toGetNotesForPerson}\n\n                    isCopyNotify={isCopyNotify}\n                    toGetAlert={toGetAlert}\n                />\n            </div>\n\n            {/*Закрытие*/}\n            <CardItem\n                flagOpening={false}\n\n                isDataForCard={isDataForCard}\n                isTimeForCard={isTimeForCard}\n                isInside={isInside}\n                isProblemForAllCards={isProblemForAllCards}\n                isOpsNumberAllCards={isOpsNumberAllCards}\n                isTimeForClosing={isTimeForClosing}\n                isWhoNotifyForClosing={isWhoNotifyForClosing}\n                toGetDurationIncident={toGetDurationIncident}\n                toNotesClosingOut={toNotesClosingOut}\n                isCopyClosing={isCopyClosing}\n\n                toGetAlert={toGetAlert}\n            />\n\n            <Alert\n                isAlert={isAlert}\n            />\n        </div>\n    )\n};\n\nexport default CardsList;","import GeneratorTxtOut from \"./generatorTxtOut\";\nexport default GeneratorTxtOut;","import TextareaAutosize from \"react-textarea-autosize\";\nimport {useEffect, useState} from \"react\";\n\nconst GeneratorTxtOut = (props) => {\n    const {\n        flagOpening = false,\n        flagClosing = false,\n        flagUpdate = false,\n        flagNotify = false,\n\n        isDataForCard = Object.prototype,\n        isTimeForCard = Object.prototype,\n        isTimeForClosing = Object.prototype,\n\n        isFlagInside = false,\n        isDataProblem = null,\n        isDataWhoNotify = null,\n        isDataNotes = null,\n        isDataOps = null,\n        isPerson = null,\n        isNotesForPerson = null,\n        isUpdate = null,\n        isClosingTime = {hourClosing: '', minuteClosing: ''},\n        isNotesClosingOut = null,\n\n        toGetAlert = Function.prototype,\n\n        toGetCopyOpeningFromTable = Function.prototype,\n        toGetCopyClosingFromTable = Function.prototype,\n        toGetCopyNotifyFromTable = Function.prototype,\n        toGetCopyUpdateFromTable = Function.prototype,\n    } = props\n\n    const {\n        qualities,\n        stand,\n        tg,\n        priority,\n        effect,\n    } = isDataForCard\n\n    const [isOpeningOut, setOpeningOut] = useState('')\n    const [isClosingOut, setClosingOut] = useState('')\n    const [isUpdateOut, setUpdateOut] = useState('')\n    const [isNotifyOut, setNotifyOut] = useState('')\n\n    let inside = ''\n    if (isFlagInside) inside = `**ВНУТРЕННИЙ**\\n`\n\n    // готовим данные из массива объектов для одной строки\n    let tgForTable = ''\n    if (tg !== undefined && tg !== null) {\n        const arr = []\n        tg.forEach(item => {\n            arr.push(item.value)\n        })\n        tgForTable = arr.join(', ')\n    }\n\n    let standOut = ''\n    if (stand !== null) standOut = `${stand}`\n    let qualitiesOut = ''\n    if (qualities !== null) qualitiesOut = ` ${qualities}`\n\n    let hourClosingOut = ''\n    if (isClosingTime.hourClosing !== '') hourClosingOut = `${isClosingTime.hourClosing}час. `\n    let minuteClosingOut = ''\n    if (isClosingTime.minuteClosing !== '') minuteClosingOut = `${isClosingTime.minuteClosing}мин.`\n\n    const strOpening = (\n        `${inside}` +\n        `**Инцидент ОТКРЫТ**` +\n        `\\n**${standOut}${qualitiesOut}**` +\n        `\\n` +\n        `\\n**${isDataProblem}**` +\n        `\\n**ТГ:** ${tgForTable}` +\n        `\\n` +\n        `\\n**Приоритет:** ${priority}` +\n        `\\n**Степень влияния:** ${effect}` +\n        `\\nhttps://jira.crpt.ru/browse/OPS-${isDataOps}` +\n        `\\n**Время инцидента:** ${isTimeForCard.hour}:${isTimeForCard.minute}` +\n        `\\n**Кто оповещён:** ${isDataWhoNotify}` +\n        `\\n` +\n        `\\n**Примечание:** ${isDataNotes}`\n    )\n\n    const strClosing = (\n        `${inside}` +\n        `**Инцидент ЗАКРЫТ**` +\n        `\\n**${standOut}${qualitiesOut}**` +\n        `\\n` +\n        `\\n**${isDataProblem}**` +\n        `\\n**ТГ:** ${tgForTable}` +\n        `\\n` +\n        `\\n**Приоритет:** ${priority}` +\n        `\\n**Степень влияния:** ${effect}` +\n        `\\nhttps://jira.crpt.ru/browse/OPS-${isDataOps}` +\n        `\\n**Время инцидента:** ${isTimeForCard.hour}:${isTimeForCard.minute} - ${isTimeForClosing.hourClosing}:${isTimeForClosing.minuteClosing} (${hourClosingOut}${minuteClosingOut})` +\n        `\\n**Кто оповещён:** ${isDataWhoNotify}` +\n        `\\n` +\n        `\\n**Примечание:** ${isNotesClosingOut}`\n    )\n\n    const strNotify = (\n        `${isPerson}` +\n        `\\n${isNotesForPerson}`\n    )\n\n    const strUpdate = (\n        `${inside}` +\n        `**Инцидент в работе**` +\n        `\\n**${standOut}${qualitiesOut}**` +\n        `\\n` +\n        `\\n${isUpdate}`\n    )\n\n    // внести изменения из INPUT в сформированную таблицу данных\n    const onWriteTxt = (event) => {\n        let {name, value} = event.target\n\n        if (name === 'opening') setOpeningOut(value)\n        if (name === 'closing') setClosingOut(value)\n        if (name === 'update') setUpdateOut(value)\n        if (name === 'notify') setNotifyOut(value)\n    }\n\n    const toCopyTable = () => {\n        if (name === 'opening') navigator.clipboard.writeText(isOpeningOut)\n        if (name === 'closing') navigator.clipboard.writeText(isClosingOut)\n        if (name === 'update') navigator.clipboard.writeText(isUpdateOut)\n        if (name === 'notify') navigator.clipboard.writeText(isNotifyOut)\n        document.execCommand(\"copy\")\n\n        toGetAlert()\n    }\n\n    // скопируем Opening для буфера по клику с карточки\n    useEffect(() => {\n        toGetCopyOpeningFromTable(strOpening)\n        // eslint-disable-next-line\n    }, [strOpening])\n\n    useEffect(() => {\n        toGetCopyClosingFromTable(strClosing)\n        // eslint-disable-next-line\n    }, [strClosing])\n\n    useEffect(() => {\n        toGetCopyNotifyFromTable(strNotify)\n        // eslint-disable-next-line\n    }, [strNotify])\n\n    useEffect(() => {\n        toGetCopyUpdateFromTable(strUpdate)\n        // eslint-disable-next-line\n    }, [strUpdate])\n\n    // обновим содержание страницы в соответсвие с данными вносимыми в карточки\n    useEffect(() => {\n        setOpeningOut(strOpening)\n    }, [strOpening])\n\n    useEffect(() => {\n        setClosingOut(strClosing)\n    }, [strClosing])\n\n    useEffect(() => {\n        setUpdateOut(strUpdate)\n    }, [strUpdate])\n\n    useEffect(() => {\n        setNotifyOut(strNotify)\n    }, [strNotify])\n\n    let isForm = ''\n    let name = ''\n\n    if (flagOpening) {\n        isForm = isOpeningOut\n        name = 'opening'\n    }\n\n    if (flagClosing) {\n        isForm = isClosingOut\n        name = 'closing'\n    }\n\n    if (flagUpdate) {\n        isForm = isUpdateOut\n        name = 'update'\n    }\n\n    if (flagNotify) {\n        isForm = isNotifyOut\n        name = 'notify'\n    }\n\n    return(\n        <div className=\"txt-out__card-body\">\n            <TextareaAutosize\n                className='txt-out__card'\n                value={isForm}\n                name={name}\n                onChange={onWriteTxt}\n            />\n\n            <div className='txt-out__card-footer'>\n                <button\n                    className=\"btn-floating waves-effect waves-light main__action-btn main__action-btn-green\"\n                    onClick={toCopyTable}\n                >\n                    <i className=\"material-icons\">content_copy</i>\n                </button>\n            </div>\n        </div>\n    )\n}\n\nexport default GeneratorTxtOut;\n","import Table from \"./table\";\nexport default Table;","import {useEffect, useState} from \"react\";\nimport Alert from \"./alert\";\nimport GeneratorTxtOut from \"./generatorTxtOut\";\nimport './table.css'\n\nconst Table = (props) => {\n    const {\n        toToggleShowTable = Function.prototype,\n        isToggleShowTable = false,\n\n        isDataForCard = Object.prototype,\n        isTimeForCard = Object.prototype,\n        isTimeForClosing = Object.prototype,\n\n        isFlagInside = false,\n\n        isDataProblem = null,\n        isDataWhoNotify = null,\n        isDataNotes = null,\n        isDataOps = null,\n        isPerson = null,\n        isNotesForPerson = null,\n        isUpdate = null,\n        isClosingTime = {hourClosing: '', minuteClosing: ''},\n        isNotesClosingOut = null,\n\n        toGetCopyOpeningFromTable = Function.prototype,\n        toGetCopyClosingFromTable = Function.prototype,\n        toGetCopyNotifyFromTable = Function.prototype,\n        toGetCopyUpdateFromTable = Function.prototype,\n    } = props\n\n    const [isAlert, setAlert] = useState(false)\n\n    const toGetAlert = () => {\n        setAlert(true)\n    }\n\n    const closeAlert = () => {\n        setAlert(false)\n    }\n\n    // componentDidUpdate\n    // изчезновение алерта Скопировано в буфер\n    useEffect(() => {\n        const timerId = setTimeout(() => closeAlert(), 3000);\n\n        // componentDidUnmount\n        return () => clearTimeout(timerId)\n        // eslint-disable-next-line\n    }, [isAlert]);\n\n    let classesForShowTable = 'hide'\n    if (isToggleShowTable) classesForShowTable = 'main__table'\n\n    return (\n        <div\n            id='dataTable'\n            className={classesForShowTable}\n        >\n            <div className=\"txt-out\">\n                <div className=\"txt-out__helper\">\n                    <GeneratorTxtOut\n                        flagOpening={true}\n                        isDataForCard={isDataForCard}\n                        isTimeForCard={isTimeForCard}\n\n                        isFlagInside={isFlagInside}\n                        isDataProblem={isDataProblem}\n                        isDataWhoNotify={isDataWhoNotify}\n                        isDataNotes={isDataNotes}\n                        isDataOps={isDataOps}\n\n                        toGetAlert={toGetAlert}\n\n                        toGetCopyOpeningFromTable={toGetCopyOpeningFromTable}\n                    />\n                </div>\n\n                <div className=\"txt-out__helper\">\n                    <GeneratorTxtOut\n                        flagUpdate={true}\n                        isDataForCard={isDataForCard}\n                        isTimeForCard={isTimeForCard}\n                        isFlagInside={isFlagInside}\n                        isUpdate={isUpdate}\n\n                        toGetAlert={toGetAlert}\n\n                        toGetCopyUpdateFromTable={toGetCopyUpdateFromTable}\n                    />\n\n                    <GeneratorTxtOut\n                        flagNotify={true}\n                        isPerson={isPerson}\n                        isNotesForPerson={isNotesForPerson}\n\n                        toGetAlert={toGetAlert}\n\n                        toGetCopyNotifyFromTable={toGetCopyNotifyFromTable}\n                    />\n                </div>\n\n                <div className=\"txt-out__helper\">\n                    <GeneratorTxtOut\n                        flagClosing={true}\n                        isDataForCard={isDataForCard}\n                        isTimeForCard={isTimeForCard}\n                        isTimeForClosing={isTimeForClosing}\n\n                        isFlagInside={isFlagInside}\n                        isDataProblem={isDataProblem}\n                        isDataWhoNotify={isDataWhoNotify}\n                        isDataNotes={isDataNotes}\n                        isDataOps={isDataOps}\n\n                        isClosingTime={isClosingTime}\n                        isNotesClosingOut={isNotesClosingOut}\n\n                        toGetAlert={toGetAlert}\n\n                        toGetCopyClosingFromTable={toGetCopyClosingFromTable}\n                    />\n                </div>\n            </div>\n\n            <div className=\"main__action\">\n                <button\n                    className=\"btn-floating btn-large waves-effect waves-light main__action-btn\"\n                    onClick={toToggleShowTable}\n                >\n                    <i className=\"material-icons\">close</i>\n                </button>\n            </div>\n\n            <Alert\n                isAlert={isAlert}\n            />\n        </div>\n    )\n}\n\nexport default Table;","import Main from \"./main\";\nexport default Main;","import {useEffect, useState} from \"react\";\nimport ControlPanel from \"../../controlPanel\";\nimport CardsList from \"../../cardsList\";\nimport Table from \"../../table\";\nimport DataForItem from \"../../../data/dataForItem\";\n\nconst Main = () => {\n\n    const [isDataForCard, setDataForCard] = useState({})\n    const [isTimeForCard, setTimeForCard] = useState({})\n    const [isTimeForClosing, setTimeForClosing] = useState({})\n    const [isNotifyPerson, setNotifyPerson] = useState([])\n    const [isToggleShowTable, setToggleShowTable] = useState(false)\n\n    // Данные для вывода в markdown\n    const [isFlagInside, setFlagInside] = useState(false)\n    const [isDataProblem, setDataProblem] = useState(null)\n    const [isDataWhoNotify, setDataWhoNotify] = useState(null)\n    const [isDataNotes, setDataNotes] = useState(null)\n    const [isDataOps, setDataOps] = useState(null)\n    const [isPerson, setPerson] = useState(null)\n    const [isNotesForPerson, setNotesForPerson] = useState(null)\n    const [isUpdate, setUpdate] = useState(null)\n    const [isClosingTime, setClosingTime] = useState({hourClosing: '', minuteClosing: ''})\n    const [isNotesClosingOut, setNotesClosingOut] = useState(null)\n\n    // Данные для копирования по кнопке на карточке-конструкторе\n    const [isCopyOpening, setCopyOpening] = useState('')\n    const [isCopyClosing, setCopyClosing] = useState('')\n    const [isCopyNotify, setCopyNotify] = useState('')\n    const [isCopyUpdate, setCopyUpdate] = useState('')\n\n    const toGetDataFromPanel = (obj) => {\n        setDataForCard(obj)\n    }\n\n    const toGetTimeFromPanel = (obj) => {\n        setTimeForCard(obj)\n    }\n\n    const toGetTimeClosing = (obj) => {\n        setTimeForClosing(obj)\n    }\n\n    const toGetNotifyPerson = (obj) => {\n        // обрабатываем объект из панели оповещения и отправляем userName в массив isNotifyPerson\n        const arr = []\n\n        DataForItem.notifyPerson.forEach(item => {\n            if (obj[item.name]) arr.push(item.userName)\n        })\n\n        setNotifyPerson(arr)\n    }\n\n    const toToggleShowTable = () => {\n        setToggleShowTable(!isToggleShowTable)\n    }\n\n    // Получить данные о ВНУТРЕННИЙ\n    const toGetFlagInside = (flag)  => {\n        setFlagInside(flag)\n    }\n\n    // Получить данные с описанием проблемы\n    const toGetDataProblem = (str)  => {\n        setDataProblem(str)\n    }\n\n    // Получить данные кто оповещен\n    const toGetDataWhoNotify = (str)  => {\n        setDataWhoNotify(str)\n    }\n\n    // Получить данные Примечание\n    const toGetDataNotes = (str)  => {\n        setDataNotes(str)\n    }\n\n    // Получить данные JIRA\n    const toGetDataOPS = (num)  => {\n        setDataOps(num)\n    }\n\n    // Получить данные об оповещаемых персонах\n    const toGetPerson = (arr)  => {\n        setPerson(arr.join(' '))\n    }\n\n    // Получить данные об оповещаемых персонах\n    const toGetNotesForPerson = (str)  => {\n        setNotesForPerson(str)\n    }\n\n    // Получить UPDATE\n    const toGetDataUpdate = (str)  => {\n        setUpdate(str)\n    }\n\n    // Получить время закрытия\n    const toGetDurationIncident = (obj)  => {\n        setClosingTime(obj)\n    }\n\n    // Получить время закрытия\n    const toNotesClosingOut = (str)  => {\n        setNotesClosingOut(str)\n    }\n\n    // Получить данные для копирования по кнопке на карточках\n    const toGetCopyOpeningFromTable = (str) => {\n        setCopyOpening(str)\n    }\n\n    const toGetCopyClosingFromTable = (str) => {\n        setCopyClosing(str)\n    }\n\n    const toGetCopyNotifyFromTable = (str) => {\n        setCopyNotify(str)\n    }\n\n    const toGetCopyUpdateFromTable = (str) => {\n        setCopyUpdate(str)\n    }\n\n    //componentDidUpdate\n    //остановить прокрутку тега body при открытом окне markdown\n    useEffect(() => {\n        if (isToggleShowTable) document.body.style.overflow = \"hidden\"\n        else document.body.style.overflow = \"visible\"\n\n    }, [isToggleShowTable])\n\n    return(\n        <>\n            <ControlPanel\n                toGetDataFromPanel={toGetDataFromPanel}\n                toGetTimeFromPanel={toGetTimeFromPanel}\n                toGetTimeClosing={toGetTimeClosing}\n                toGetNotifyPerson={toGetNotifyPerson}\n            />\n\n            <div className='content container'>\n                <CardsList\n                    isDataForCard={isDataForCard}\n                    isTimeForCard={isTimeForCard}\n                    isTimeForClosing={isTimeForClosing}\n                    isNotifyPerson={isNotifyPerson}\n                    toGetFlagInside={toGetFlagInside}\n                    toGetDataProblem={toGetDataProblem}\n                    toGetDataWhoNotify={toGetDataWhoNotify}\n                    toGetDataNotes={toGetDataNotes}\n                    toGetDataOPS={toGetDataOPS}\n                    toGetPerson={toGetPerson}\n                    toGetNotesForPerson={toGetNotesForPerson}\n                    toGetDataUpdate={toGetDataUpdate}\n                    toGetDurationIncident={toGetDurationIncident}\n                    toNotesClosingOut={toNotesClosingOut}\n\n                    isCopyOpening={isCopyOpening}\n                    isCopyClosing={isCopyClosing}\n                    isCopyNotify={isCopyNotify}\n                    isCopyUpdate={isCopyUpdate}\n                />\n\n                <button\n                    className=\"btn-floating btn-large main__btn-showTable\"\n                    onClick={toToggleShowTable}\n                >\n                    <i className=\"material-icons main__icon-showTable\">create</i>\n                </button>\n            </div>\n\n            <Table\n                isDataForCard={isDataForCard}\n                isTimeForCard={isTimeForCard}\n                isTimeForClosing={isTimeForClosing}\n                isToggleShowTable={isToggleShowTable}\n\n                isFlagInside={isFlagInside}\n                isDataProblem={isDataProblem}\n                isDataWhoNotify={isDataWhoNotify}\n                isDataNotes={isDataNotes}\n                isDataOps={isDataOps}\n                isPerson={isPerson}\n                isNotesForPerson={isNotesForPerson}\n                isUpdate={isUpdate}\n                isClosingTime={isClosingTime}\n                isNotesClosingOut={isNotesClosingOut}\n\n                toToggleShowTable={toToggleShowTable}\n\n                toGetCopyOpeningFromTable={toGetCopyOpeningFromTable}\n                toGetCopyClosingFromTable={toGetCopyClosingFromTable}\n                toGetCopyNotifyFromTable={toGetCopyNotifyFromTable}\n                toGetCopyUpdateFromTable={toGetCopyUpdateFromTable}\n            />\n        </>\n\n    )\n};\n\nexport default Main;","import Footer from \"./footer\";\nexport default Footer;","const Footer = () => {\n    return(\n        <footer className=\"page-footer blue-grey darken-4\">\n            <div className=\"footer-copyright\">\n                <div className=\"container\">\n                    DUTY © {new Date().getFullYear()}\n                    <a className=\"grey-text text-lighten-4 right\" href=\"https://confluence.crpt.ru/pages/viewpage.action?pageId=142367287\" target=\"_blank\" rel=\"noreferrer\">Confluence</a>\n                </div>\n            </div>\n        </footer>\n    )\n};\n\nexport default Footer;","import Header from \"../layout/header\";\nimport Main from \"../layout/main\";\nimport Footer from \"../layout/footer\";\n\nimport './App.css';\n\nfunction App() {\n\n    return (\n        <>\n            <Header />\n            <Main />\n            <Footer />\n        </>\n    );\n}\n\nexport default App;\n","import App from \"./app\";\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from \"./components/app\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}