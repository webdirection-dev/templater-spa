{"version":3,"sources":["components/layout/header/index.js","components/layout/header/header.jsx","data/dataForItem.js","components/controlTitleItem/controlTitleItem.jsx","components/controlTitleItem/index.js","components/controlPanel/controlPanel.jsx","components/controlPanel/index.js","timeDuration/timeDuration.js","components/hooks/getDate.js","components/copyMarkdown/index.js","components/copyMarkdown/copyMarkdown.jsx","components/cardItem/cardItem.jsx","components/cardItem/index.js","components/notifyPerson/index.js","components/notifyPerson/notifyPerson.jsx","components/updateCard/index.js","components/updateCard/updateCard.jsx","components/table/alert/index.js","components/table/alert/alert.jsx","components/cardsList/index.js","components/cardsList/cardsList.jsx","components/layout/main/index.js","components/layout/main/main.jsx","components/layout/footer/index.js","components/layout/footer/footer.jsx","components/app/app.jsx","components/app/index.js","index.js"],"names":["Header","className","href","id","target","rel","DataForItem","summary","icon","name","tg","label","value","priority","effect","qualities","stand","notifyPerson","userName","ControlTitleItem","getNameAction","nameAction","useState","namePanel","setNamePanel","isIconForTab","setIconForTab","onShowPanelItem","event","namePanelTarget","lastChild","textContent","iconText","parentNode","onClosePanel","View","map","item","classPanel","classesIconClose","onClick","ControlPanel","props","toGetDataFromPanel","Function","prototype","toGetNotifyPerson","isQualities","setQualities","isStand","setStand","isSelectTG","setSelectTG","isSelectPriority","setSelectPriority","isSelectEffect","setSelectEffect","isEven","setEven","sokolov","markov","balamutin","zalygin","novak","suprun","isNotifyPerson","setNotifyPerson","setNameAction","showSetTime","setShowSetTime","isShowSetTimeClosing","setShowSetTimeClosing","onShowSetTime","onShowSetTimeClosing","onChangeInput","onCheckBox","newObj","useEffect","FormToSummary","classesOpen","classesNotify","classesForLabelCountry","classesForLabelStand","classesForLabelTg","length","classesForLabelPriority","classesForLabelEffect","classesForNotifyPersonEven","classesForNotifyPersonEdd","htmlFor","isClearable","onChange","options","placeholder","noOptionsMessage","isMulti","type","checked","TimeDuration","isGetDataTime","isEndDate","addZero","num","duration","Date","parse","minutes","Math","ceil","hours","floor","days","durationDay","durationHour","durationMinute","useDateHook","toLocaleString","year","month","day","CopyMarkdown","flagCard","isChooseInside","isInside","isProblem","isProblemForAllCards","isOpsNumber","isOpsNumberAllCards","isDataForCard","Object","isWhoNotify","isWhoNotifyForClosing","isNotes","isNotesClosing","isNotesUpdate","txtForCopy","personNotify","hoursStartDate","minutesStartDate","isGetTimeStart","startHour","startMinute","hoursEndDate","minutesEndDate","durationIncOut","isStartDay","dayClose","insideOpen","inside","tgForTable","undefined","arr","forEach","push","join","standOut","qualitiesOut","dayStart","dayEnd","start","end","strOpening","strClosing","strNotify","strUpdate","navigator","clipboard","writeText","document","execCommand","CardItem","flagOpening","onCheckInside","getProblemForAllCards","getOpsNumberForAllCards","getWhoNotify","toGetDataNotes","toGetDurationIncident","toNotesClosingOut","toGetAlert","toGetTimeStart","toGetDataTime","getStartDay","setChooseInside","setOpsNumber","setProblem","setNotes","setWhoNotify","setNotesClosing","isWarning","setWarning","isPrimary","setPrimary","isInputHourForClosing","setInputHourForClosing","isInputMinuteForClosing","setInputMinuteForClosing","isStartDate","setStartDate","setEndDate","getHours","getMinutes","durationIncident","dayForPrint","hourForPrint","minuteForPrint","trim","toCopyMarkdown","tgOut","i","index","onWriteInput","Number","classesForCheckBox","classesForCardInside","classesForLabelInput","classesIfWarning","classesIfPrimary","hourClosing","minuteClosing","onChooseInside","onWarningForOps","ViewOpening","onBlur","selected","date","showTimeSelect","dateFormat","timeFormat","ViewClosing","NotifyPerson","Array","toGetNotesForPerson","pre","priorityOut","effectOut","UpdateCard","toGetDataUpdate","setNotesUpdate","Alert","isAlert","classesForShowAlert","CardsList","setInside","setProblemForAllCards","setOpsNumberAllCards","setWhoNotifyForClosing","setAlert","setGetDataTime","setGetTimeStart","setStartDay","timerId","setTimeout","clearTimeout","flag","text","txt","Main","setDataForCard","obj","Footer","getFullYear","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.1f28fab1.chunk.js","sourcesContent":["import Header from \"./header\";\nexport default Header;","import './header.css'\n\nconst Header = () => {\n    return(\n        <nav className='blue-grey darken-2 header'>\n            <div className=\"nav-wrapper\">\n                <a href=\"./\" className=\"brand-logo\">DUTY</a>\n                <ul id=\"nav-mobile\" className=\"right hide-on-med-and-down\">\n                    <li><a href=\"https://jira.crpt.ru/secure/CreateIssue!default.jspa\" target=\"_blank\" rel=\"noreferrer\">Создать в JIRA</a></li>\n                </ul>\n            </div>\n        </nav>\n    )\n}\n\nexport default Header;","const DataForItem = {\n    summary: [\n        {\n            icon: 'lock_open',\n            name: 'Открытие'\n        },\n        {\n            icon: 'notifications_active',\n            name: 'Оповещение'\n        },\n    ],\n\n    tg: [\n        {\n            label: 'Все ТГ',\n            value: 'Все ТГ'\n        },\n        {\n            label: 'Все ТГ, кроме Фарма',\n            value: 'Все ТГ, кроме Фарма',\n        },\n        {\n            label: 'Не определено',\n            value: 'Не определено'\n        },\n        {\n            label: 'АТП',\n            value: 'АТП'\n        },\n        {\n            label: 'БАД',\n            value: 'БАД'\n        },\n        {\n            label: 'Велосипеды',\n            value: 'Велосипеды'\n        },\n        {\n            label: 'Кресла-коляски',\n            value: 'Кресла-коляски'\n        },\n        {\n            label: 'ЛегПром',\n            value: 'ЛегПром'\n        },\n        {\n            label: 'Меха',\n            value: 'Меха'\n        },\n        {\n            label: 'Молочная продукция',\n            value: 'Молочная продукция'\n        },\n        {\n            label: 'Обувь',\n            value: 'Обувь'\n        },\n        {\n            label: 'Парфюмерия',\n            value: 'Парфюмерия'\n        },\n        {\n            label: 'Пиво',\n            value: 'Пиво'\n        },\n        {\n            label: 'Питьевая вода',\n            value: 'Питьевая вода'\n        },\n        {\n            label: 'РВ',\n            value: 'РВ'\n        },\n        {\n            label: 'Табак',\n            value: 'Табак'\n        },\n        {\n            label: 'Фарма',\n            value: 'Фарма'\n        },\n        {\n            label: 'Фототехника',\n            value: 'Фототехника'\n        },\n        {\n            label: 'Шины',\n            value: 'Шины'\n        },\n    ],\n\n    priority: [\n        {\n            label: 'Критический',\n            value: 'Критический'\n        },\n        {\n            label: 'Высокий',\n            value: 'Высокий'\n        },\n        {\n            label: 'Средний',\n            value: 'Средний',\n        },\n    ],\n\n    effect: [\n\n        {\n            label: 'Массовое',\n            value: 'Массовое'\n        },\n        {\n            label: 'Одиночное',\n            value: 'Одиночное',\n        },\n        {\n            label: 'Групповое',\n            value: 'Групповое',\n        },\n        {\n            label: 'Без влияния',\n            value: 'Без влияния'\n        },\n    ],\n\n    qualities: [\n        {\n            label: 'Беларусь',\n            value: 'Республика Беларусь'\n        },\n        {\n            label: 'Узбекистан',\n            value: 'Узбекистан',\n        },\n        {\n            label: 'Казахстан',\n            value: 'Казахстан',\n        },\n    ],\n\n    stand: [\n        {\n            label: 'Прод',\n            value: 'ПРОД'\n        },\n        {\n            label: 'Демо',\n            value: 'ДЕМО'\n        },\n        {\n            label: 'Прод + Демо',\n            value: 'ПРОД+ДЕМО'\n        },\n    ],\n\n    notifyPerson: [\n        {\n            name: 'sokolov',\n            userName: '@AndreySokolov83'\n        },\n        {\n            name: 'markov',\n            userName: '@haltandcatchfire91'\n        },\n        {\n            name: 'balamutin',\n            userName: '@dezm0d'\n        },\n        {\n            name: 'zalygin',\n            userName: '@mishanyazal'\n        },\n        {\n            name: 'novak',\n            userName: '@crpt_novak'\n        },\n        {\n            name: 'suprun',\n            userName: '@lacronn'\n        },\n    ]\n};\n\nexport default DataForItem;","import {useState} from \"react\";\nimport DataForItem from \"../../data/dataForItem\";\n\nimport './controlTitleItem.css'\n\nconst ControlTitleItem = ({getNameAction, nameAction}) => {\n    const [namePanel, setNamePanel] = useState(null);\n    const [isIconForTab, setIconForTab] = useState(null);\n\n    const onShowPanelItem = event => {\n        const namePanelTarget = event.target.lastChild.textContent;\n        const iconText = event.target.parentNode.lastChild.textContent;\n\n        setNamePanel(namePanelTarget);\n        setIconForTab(iconText);\n\n        if (namePanelTarget[0] === 'l') getNameAction(iconText)\n        else getNameAction(namePanelTarget)\n    };\n\n    const onClosePanel = () => {\n        getNameAction(null)\n    };\n\n    return(\n        <View\n            onShowPanelItem={onShowPanelItem}\n            namePanel={namePanel}\n            isIconForTab={isIconForTab}\n            onClosePanel={onClosePanel}\n        />\n    )\n};\n\nexport default ControlTitleItem;\n\nconst View = ({onShowPanelItem, namePanel, isIconForTab, onClosePanel}) => {\n\n    return(\n        DataForItem.summary.map(item => {\n            let classPanel = 'control-title__item ';\n            let classesIconClose = 'hide'\n\n            if (item.name === namePanel || item.name === isIconForTab) {\n                classPanel = classPanel + 'control-title__active';\n                classesIconClose = 'small material-icons control-title__close'\n            }\n\n            return(\n                <li\n                    key={item.name}\n                    className={classPanel}\n                    onClick={(event) => onShowPanelItem(event)}\n                >\n                    <div className=\"collapsible-header control-title__header\"><\n                        i className=\"material-icons\">{item.icon}</i>\n                        {item.name}\n                    </div>\n                    <i\n                        className={classesIconClose}\n                        onClick={onClosePanel}\n                    >clear</i>\n                </li>\n            )\n        })\n    )\n};","import ControlTitleItem from \"./controlTitleItem\";\nexport default ControlTitleItem;","import {useEffect, useState} from \"react\";\nimport ControlTitleItem from \"../controlTitleItem\";\nimport './controlPanel.css'\n\nimport Select from 'react-select';\nimport DataForItem from \"../../data/dataForItem\";\nconst ControlPanel = (props) => {\n    const {\n        toGetDataFromPanel = Function.prototype,\n        toGetNotifyPerson = Function.prototype,\n    } = props\n\n    const [isQualities, setQualities] = useState(null);\n    const [isStand, setStand] = useState(null);\n    const [isSelectTG, setSelectTG] = useState(null);\n    const [isSelectPriority, setSelectPriority] = useState(null);\n    const [isSelectEffect, setSelectEffect] = useState(null);\n    const [isEven, setEven] = useState(true);\n    const [isNotifyPerson, setNotifyPerson] = useState({\n        sokolov: true,\n        markov: true,\n        balamutin: true,\n        zalygin: true,\n        novak: true,\n        suprun: false,\n    });\n\n    const [nameAction, setNameAction] = useState('');\n    const [showSetTime, setShowSetTime] = useState(false);\n    const [isShowSetTimeClosing, setShowSetTimeClosing] = useState(false);\n\n    const getNameAction = (item) => {\n        setNameAction(item)\n    };\n\n    const onShowSetTime = () => {\n        setShowSetTime(!showSetTime)\n    };\n\n    const onShowSetTimeClosing = () => {\n        setShowSetTimeClosing(!isShowSetTimeClosing)\n    };\n\n    const onChangeInput = (event) => {\n        setEven(!isEven)\n    }\n\n    const onCheckBox = (event) => {\n        const {name} = event.target\n        const newObj = {\n            ...isNotifyPerson,\n            [name]: !isNotifyPerson[name]\n        }\n\n        setNotifyPerson(newObj)\n    }\n\n    const openControl = (item) => {\n        return(\n            <FormToSummary\n                item={item}\n\n                onShowSetTime={onShowSetTime}\n                onShowSetTimeClosing={onShowSetTimeClosing}\n                onChangeInput={onChangeInput}\n                onCheckBox={onCheckBox}\n\n                setQualities={setQualities}\n                setStand={setStand}\n                setSelectTG={setSelectTG}\n                setSelectPriority={setSelectPriority}\n                setSelectEffect={setSelectEffect}\n\n                showSetTime={showSetTime}\n\n                isQualities={isQualities}\n                isStand={isStand}\n                isSelectTG={isSelectTG}\n                isSelectPriority={isSelectPriority}\n                isSelectEffect={isSelectEffect}\n                isShowSetTimeClosing={isShowSetTimeClosing}\n                isEven={isEven}\n                isNotifyPerson={isNotifyPerson}\n            />\n        )\n    };\n\n    // componentDidUpdate\n    useEffect(() => {\n        toGetDataFromPanel(\n            {\n                qualities: isQualities && isQualities.value,\n                stand: isStand && isStand.value,\n                tg: isSelectTG && isSelectTG,\n                priority: isSelectPriority && isSelectPriority.value,\n                effect: isSelectEffect && isSelectEffect.value,\n            }\n        )\n        // eslint-disable-next-line\n    }, [isQualities, isStand, isSelectTG, isSelectPriority, isSelectEffect])\n\n    // componentDidUpdate\n    // Контролирует состояние персон оповещения в зависимости от чет/нечет\n    useEffect(() => {\n        let newObj = {}\n\n        if (isEven) {\n             newObj = {\n                ...isNotifyPerson,\n                suprun: false,\n                novak: true\n            }\n        } else {\n            newObj = {\n                ...isNotifyPerson,\n                suprun: true,\n                novak: false\n            }\n        }\n\n        setNotifyPerson(newObj)\n    // eslint-disable-next-line\n    }, [isEven])\n\n    // componentDidUpdate\n    // передать наверх данные об оповещаемых персонах\n    useEffect(() => {\n        toGetNotifyPerson(isNotifyPerson)\n    // eslint-disable-next-line\n    }, [isNotifyPerson])\n\n    return(\n        <div className='control-panel'>\n            <ul className=\"collapsible control-title__list\">\n                <ControlTitleItem\n                    getNameAction={getNameAction}\n                    nameAction={nameAction}\n                />\n            </ul>\n            {openControl(nameAction)}\n        </div>\n    )\n};\n\nexport default ControlPanel;\n\nconst FormToSummary = (props) => {\n    const {\n        item,\n\n        setQualities,\n        setStand,\n        setSelectTG,\n        setSelectPriority,\n        setSelectEffect,\n\n        onChangeInput,\n        onCheckBox,\n\n        isQualities,\n        isStand,\n        isSelectTG,\n        isSelectPriority,\n        isSelectEffect,\n\n        isEven,\n        isNotifyPerson,\n    } = props;\n\n    let classesOpen = 'hide';\n    let classesNotify = 'hide';\n\n    if (item === 'Открытие') classesOpen = 'control-panel__main'\n    if (item === 'Оповещение') classesNotify = 'control-panel__main'\n\n    let classesForLabelCountry = 'hide';\n    if (isQualities !== null) classesForLabelCountry = 'control-panel__label'\n\n    let classesForLabelStand = 'hide';\n    if (isStand !== null) classesForLabelStand = 'control-panel__label'\n\n    let classesForLabelTg = 'hide';\n    if (isSelectTG && isSelectTG.length > 0) classesForLabelTg = 'control-panel__label'\n\n    let classesForLabelPriority = 'hide';\n    if (isSelectPriority !== null) classesForLabelPriority = 'control-panel__label'\n\n    let classesForLabelEffect = 'hide';\n    if (isSelectEffect !== null) classesForLabelEffect = 'control-panel__label'\n\n    let classesForNotifyPersonEven = 'hide';\n    if (isEven) classesForNotifyPersonEven = 'control-panel__footer-even'\n\n    let classesForNotifyPersonEdd = 'hide';\n    if (!isEven) classesForNotifyPersonEdd = 'control-panel__footer-even'\n\n    return (\n        <div className='control-panel__actions'>\n\n            <div className={classesOpen}>\n                <div className=\"control-panel__footer\">\n                    <div className=\"control-panel__select\">\n                        <label\n                            htmlFor='stand'\n                            className={classesForLabelStand}\n                        > Контур </label>\n\n                        <Select\n                            isClearable\n                            name='stand'\n                            className='select-react'\n                            onChange={setStand}\n                            options={DataForItem.stand}\n                            placeholder='Контур'\n                            noOptionsMessage={() => 'Не найдено'}\n                        />\n                    </div>\n\n                    <div className=\"control-panel__select\">\n                        <label\n                            htmlFor='country'\n                            className={classesForLabelCountry}\n                        > ЕАЭС </label>\n\n                        <Select\n                            isClearable\n                            name='country'\n                            className='select-react'\n                            onChange={setQualities}\n                            options={DataForItem.qualities}\n                            placeholder='ЕАЭС'\n                            noOptionsMessage={() => 'Не найдено'}\n                        />\n                    </div>\n\n                    <div className=\"control-panel__select\">\n                        <label\n                            htmlFor='tg'\n                            className={classesForLabelTg}\n                        > ТГ </label>\n\n                        <Select\n                            isMulti\n                            className='select-react'\n                            onChange={setSelectTG}\n                            options={DataForItem.tg}\n                            placeholder='Выбрать ТГ'\n                            noOptionsMessage={() => 'ТГ не найдена'}\n                        />\n                    </div>\n                </div>\n\n                <div className=\"control-panel__footer\">\n                    <div className=\"control-panel__select\">\n                        <label\n                            htmlFor='priority'\n                            className={classesForLabelPriority}\n                        > Приоритет </label>\n\n                        <Select\n                            isClearable\n                            name='priority'\n                            className='select-react'\n                            onChange={setSelectPriority}\n                            options={DataForItem.priority}\n                            placeholder='Приоритет'\n                        />\n                    </div>\n\n                    <div className=\"control-panel__select\">\n                        <label\n                            htmlFor='effect'\n                            className={classesForLabelEffect}\n                        > Влияние </label>\n\n                        <Select\n                            isClearable\n                            name='effect'\n                            className='select-react'\n                            onChange={setSelectEffect}\n                            options={DataForItem.effect}\n                            placeholder='Влияние'\n                        />\n                    </div>\n\n                    <div className=\"control-panel__select\">\n                        <p className='hide'>1</p>\n                    </div>\n                </div>\n            </div>\n\n            <div className={classesNotify}>\n                <div className=\"control-panel__footer control-panel__footer-notify\">\n                    <div className='control-panel__footer-radio'>\n                        <label>\n                            <input\n                                name=\"whoNotify\"\n                                type=\"radio\"\n                                checked={isEven}\n                                value='even'\n                                onChange={onChangeInput}\n                            />\n                            <span>Чётные дни</span>\n                        </label>\n                    </div>\n                    <div className='control-panel__footer-radio'>\n                        <label>\n                            <input\n                                name=\"whoNotify\"\n                                type=\"radio\"\n                                checked={!isEven}\n                                value='odd'\n                                onChange={onChangeInput}\n                            />\n                            <span>Нечётные дни</span>\n                        </label>\n                    </div>\n                </div>\n\n                <div className=\"control-panel__footer control-panel__footer-notify control-panel__footer-even\">\n                    <label>\n                        <input\n                            type=\"checkbox\"\n                            className=\"filled-in\"\n                            name='markov'\n                            checked={isNotifyPerson.sokolov}\n                            onChange={onCheckBox}\n                        />\n                        <span>Андрей Соколов</span>\n                    </label>\n                    <label>\n                        <input\n                            type=\"checkbox\"\n                            className=\"filled-in\"\n                            name='sokolov'\n                            checked={isNotifyPerson.sokolov}\n                            onChange={onCheckBox}\n                        />\n                        <span>Василий Марков</span>\n                    </label>\n\n                    <label>\n                        <input\n                            type=\"checkbox\"\n                            className=\"filled-in\"\n                            name='balamutin'\n                            checked={isNotifyPerson.balamutin}\n                            onChange={onCheckBox}\n                        />\n                        <span>Анатолий Баламутин</span>\n                    </label>\n\n                    <label>\n                        <input\n                            type=\"checkbox\"\n                            className=\"filled-in\"\n                            name='zalygin'\n                            checked={isNotifyPerson.zalygin}\n                            onChange={onCheckBox}\n                        />\n                        <span>Михаил Залыгин</span>\n                    </label>\n\n                    <label className={classesForNotifyPersonEven}>\n                        <input\n                            type=\"checkbox\"\n                            className=\"filled-in\"\n                            name='novak'\n                            checked={isNotifyPerson.novak}\n                            onChange={onCheckBox}\n                        />\n                        <span>Владислав Новак</span>\n                    </label>\n\n                    <label className={classesForNotifyPersonEdd}>\n                        <input\n                            type=\"checkbox\"\n                            className=\"filled-in\"\n                            name='suprun'\n                            checked={isNotifyPerson.suprun}\n                            onChange={onCheckBox}\n                        />\n                        <span>Иван Супрун</span>\n                    </label>\n                </div>\n                </div>\n        </div>\n    )\n};","import ControlPanel from \"./controlPanel\";\nexport default ControlPanel;","import './timeDuration.css'\n\nconst TimeDuration = ({isGetDataTime = {}, isEndDate = {}}) => {\n    const addZero = num => num <= 9 ? \"0\" + num : num;\n\n    const duration = Date.parse(isEndDate) - Date.parse(isGetDataTime),\n        // seconds = addZero(Math.floor((duration / 1000) % 60)), // секунды делим на 60 секунд, остаток = кол-во секунд\n        minutes = addZero(Math.ceil((duration / 1000 / 60) % 60)), // секунды / секунды / минуты, остаток минуты\n        hours = addZero(Math.floor((duration / (1000 * 60 * 60)) % 24)), // милисек/(1000* 60*60) отстаток от 24 часов\n        days = addZero(Math.floor(duration / (1000 * 60 * 60 * 24))); // остаток дней\n\n    if (duration < 0) {\n        return {\n            durationDay: 0,\n            durationHour: 0,\n            durationMinute: 0,\n        }\n    }\n\n    return {\n        durationDay: days,\n        durationHour: hours,\n        durationMinute: minutes,\n    }\n}\n\nexport default TimeDuration;","const useDateHook = (value) => {\n\n    const options = {\n        // era: 'long',\n        year: 'numeric',\n        month: 'numeric',\n        day: 'numeric',\n        // weekday: 'short',\n        // timezone: 'UTC',\n        // hour: 'numeric',\n        // minute: 'numeric',\n        // second: 'numeric'\n    };\n\n    return value.toLocaleString('ru', options)\n}\n\nexport default useDateHook;","import CopyMarkdown from \"./copyMarkdown\";\nexport default CopyMarkdown;","import useDateHook from \"../hooks/getDate\";\n\nconst CopyMarkdown = ({\n                          flagCard = '',\n\n                          isChooseInside = false,\n                          isInside = false,\n\n                          isProblem = '',\n                          isProblemForAllCards,\n\n                          isOpsNumber = '',\n                          isOpsNumberAllCards = '',\n\n                          isDataForCard = Object.prototype,\n\n                          isWhoNotify = '',\n                          isWhoNotifyForClosing = '',\n\n                          isNotes = '',\n                          isNotesClosing = '',\n\n                          isNotesUpdate = '',\n                          txtForCopy = '',\n                          personNotify = '',\n\n                          hoursStartDate = null,\n                          minutesStartDate = null,\n\n                          isGetTimeStart = {startHour: null, startMinute: null},\n                          hoursEndDate = null,\n                          minutesEndDate = null,\n                          durationIncOut = '',\n\n                          isStartDay = '',\n                          dayClose = '',\n\n                      }) => {\n    const {\n        qualities,\n        stand,\n        tg,\n        priority,\n        effect,\n    } = isDataForCard\n\n    let insideOpen = ''\n    if (isChooseInside) insideOpen = `**ВНУТРЕННИЙ**\\n`\n\n    let inside = ''\n    if (isInside) inside = `**ВНУТРЕННИЙ**\\n`\n\n    // готовим данные из массива объектов для одной строки\n    let tgForTable = ''\n    if (tg !== undefined && tg !== null) {\n        const arr = []\n        tg.forEach(item => {\n            arr.push(item.value)\n        })\n        tgForTable = arr.join(', ')\n    }\n\n    let standOut = ''\n    if (stand !== null) standOut = `${stand}`\n    let qualitiesOut = ''\n    if (qualities !== null) qualitiesOut = ` ${qualities}`\n\n    //Логика для отрисовки дня начала и дня окончания\n    let dayStart = ''\n    let dayEnd = ''\n    const start = useDateHook(isStartDay)\n    const end = useDateHook(dayClose)\n\n    if (start < end) {\n        dayStart = ` ${start}`\n        dayEnd = `${end} `\n    }\n\n    const strOpening = (\n        `${insideOpen}` +\n        `**Инцидент ОТКРЫТ**` +\n        `\\n**${standOut}${qualitiesOut}**` +\n        `\\n` +\n        `\\n**${isProblem}**` +\n        `\\n**ТГ:** ${tgForTable}` +\n        `\\n` +\n        `\\n**Приоритет:** ${priority}` +\n        `\\n**Степень влияния:** ${effect}` +\n        `\\nhttps://jira.crpt.ru/browse/OPS-${isOpsNumber}` +\n        `\\n**Время инцидента:** ${hoursStartDate}:${minutesStartDate}` +\n        `\\n**Кто оповещён:** ${isWhoNotify}` +\n        `\\n` +\n        `\\n**Примечание:** ${isNotes}`\n    )\n\n    const strClosing = (\n        `${inside}` +\n        `**Инцидент ЗАКРЫТ**` +\n        `\\n**${standOut}${qualitiesOut}**` +\n        `\\n` +\n        `\\n**${isProblemForAllCards}**` +\n        `\\n**ТГ:** ${tgForTable}` +\n        `\\n` +\n        `\\n**Приоритет:** ${priority}` +\n        `\\n**Степень влияния:** ${effect}` +\n        `\\nhttps://jira.crpt.ru/browse/OPS-${isOpsNumberAllCards}` +\n        `\\n**Время инцидента:**${dayStart} ${isGetTimeStart.startHour}:${isGetTimeStart.startMinute} - ${dayEnd}${hoursEndDate}:${minutesEndDate} (${durationIncOut})` +\n        `\\n**Кто оповещён:** ${isWhoNotifyForClosing}` +\n        `\\n` +\n        `\\n**Примечание:** ${isNotesClosing}`\n    )\n\n    const strNotify = (\n        `${personNotify}` +\n        `\\n${txtForCopy}`\n    )\n\n    const strUpdate = (\n        `${inside}` +\n        `**Инцидент в работе**` +\n        `\\n**${standOut}${qualitiesOut}**` +\n        `\\n` +\n        `\\n${isNotesUpdate}`\n    )\n\n    if (flagCard === 'opening') navigator.clipboard.writeText(strOpening)\n    if (flagCard === 'closing') navigator.clipboard.writeText(strClosing)\n    if (flagCard === 'update') navigator.clipboard.writeText(strUpdate)\n    if (flagCard === 'notify') navigator.clipboard.writeText(strNotify)\n\n    document.execCommand(\"copy\")\n}\n\nexport default CopyMarkdown","import './cardItem.css'\nimport {useEffect, useState} from \"react\";\nimport TextareaAutosize from 'react-textarea-autosize';\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nimport TimeDuration from \"../../timeDuration/timeDuration\";\nimport CopyMarkdown from \"../copyMarkdown\";\n\nconst addZero = num => num <= 9 ? \"0\" + num : num;\n\nconst CardItem = (props) => {\n    const {\n        flagOpening = true,\n\n        isDataForCard = Object.prototype,\n\n        onCheckInside = Function.prototype,\n        isInside = false,\n        getProblemForAllCards = Function.prototype,\n        isProblemForAllCards = null,\n        getOpsNumberForAllCards = Function.prototype,\n        isOpsNumberAllCards = null,\n        getWhoNotify = Function.prototype,\n        isWhoNotifyForClosing = null,\n        toGetDataNotes = Function.prototype,\n        toGetDurationIncident = Function.prototype,\n        toNotesClosingOut = Function.prototype,\n\n        toGetAlert = Function.prototype,\n        toGetTimeStart = Function.prototype,\n        toGetDataTime = Function.prototype,\n        isGetDataTime = {},\n        isGetTimeStart = {},\n\n        getStartDay = Function.prototype,\n        isStartDay = ''\n    } = props\n\n    const [isChooseInside, setChooseInside] = useState(false)\n    const [isOpsNumber, setOpsNumber] = useState('')\n    const [isProblem, setProblem] = useState('')\n    const [isNotes, setNotes] = useState('')\n    const [isWhoNotify, setWhoNotify] = useState('')\n    const [isNotesClosing, setNotesClosing] = useState('')\n    const [isWarning, setWarning] = useState(false)\n    const [isPrimary, setPrimary] = useState(false)\n    const [isInputHourForClosing, setInputHourForClosing] = useState('')\n    const [isInputMinuteForClosing, setInputMinuteForClosing] = useState('')\n\n    // React Datepicker\n    const [isStartDate, setStartDate] = useState(new Date())\n    const [isEndDate, setEndDate] = useState(new Date())\n\n    const dayClose = isEndDate\n\n    //Передать наверх день открытия\n    useEffect(() => {\n        getStartDay(isStartDate)\n        // eslint-disable-next-line\n    }, [isStartDate])\n\n    const hoursStartDate = addZero(isStartDate.getHours())\n    const minutesStartDate = addZero(isStartDate.getMinutes())\n    const hoursEndDate = addZero(isEndDate.getHours())\n    const minutesEndDate = addZero(isEndDate.getMinutes())\n\n    const durationIncident = TimeDuration({isGetDataTime, isEndDate})\n\n    let dayForPrint = ''\n    let hourForPrint = ''\n    let minuteForPrint = ''\n    if (durationIncident.durationDay !== '00') dayForPrint = `${durationIncident.durationDay}дн.`\n    if (durationIncident.durationHour !== '00') hourForPrint = `${durationIncident.durationHour}ч.`\n    if (durationIncident.durationMinute !== '00') minuteForPrint = `${durationIncident.durationMinute}мин.`\n    if (durationIncident.durationMinute === 60) {\n        hourForPrint = `${addZero(+durationIncident.durationHour + 1)}ч.`\n        minuteForPrint = ``\n    }\n    let durationIncOut = `${dayForPrint} ${hourForPrint} ${minuteForPrint}`.trim()\n\n    //Передаем время начала открытия в компонент cardList\n    useEffect(() => {\n        toGetTimeStart(\n            {\n                startHour: addZero(isStartDate.getHours()),\n                startMinute: addZero(isStartDate.getMinutes()),\n            }\n        )\n\n        toGetDataTime(isStartDate)\n        // eslint-disable-next-line\n    }, [isStartDate])\n\n    const toCopyMarkdown = (flagCard) => {\n        toGetAlert()\n        CopyMarkdown({\n            flagCard,\n\n            isChooseInside,\n            isInside,\n\n            isProblem,\n            isProblemForAllCards,\n\n            isDataForCard,\n\n\n            isOpsNumber,\n            isOpsNumberAllCards,\n\n            isWhoNotify,\n            isWhoNotifyForClosing,\n\n            isNotes,\n            isNotesClosing,\n\n            isGetTimeStart,\n\n            hoursStartDate,\n            minutesStartDate,\n            hoursEndDate,\n            minutesEndDate,\n            durationIncOut,\n\n            isStartDay,\n            dayClose,\n        })\n    }\n\n    const {\n        qualities,\n        stand,\n        tg,\n        priority,\n        effect\n    } = isDataForCard\n\n    // Обработка входящего массива с ТГ\n    let tgOut = null\n\n    if (tg && tg.length === 1) {\n        tgOut = tg.map(i => i.value)\n    }\n\n    if (tg && tg.length > 1) {\n        tgOut = tg.map((i, index) => {\n            if (index < tg.length - 1) return `${i.value}, `\n            return i.value\n        })\n    }\n\n    const onChooseInside = () => {\n        setChooseInside(!isChooseInside)\n    }\n\n    const onWriteInput = (event) => {\n        let {name, value} = event.target\n\n        if (name === 'ops' && Number(value) && value.length < 6) setOpsNumber(value)\n        if (name === 'ops' && value.length === 5) {\n            setWarning(false)\n            setPrimary(true)\n        }\n        if (name === 'ops' && value.length < 5) setPrimary(false)\n        if (name === 'ops' && value === '') setOpsNumber(value)\n\n        if (name === 'problem') {\n            setProblem(value)\n        }\n\n        if (name === 'notes') {\n            setNotes(value)\n        }\n\n        if (name === 'whoIsNotify') {\n            setWhoNotify(value)\n        }\n\n        if (name === 'notesClosing') {\n            setNotesClosing(value)\n        }\n\n        if (name === 'hourInputForClosing') {\n            setInputHourForClosing(value)\n        }\n\n        if (name === 'minuteInputForClosing') {\n            setInputMinuteForClosing(value)\n        }\n    }\n\n    const onWarningForOps = (event) => {\n        let {value} = event.target\n        if (value.length < 5) setWarning(true)\n    }\n\n\n\n    let classesForCheckBox = 'summary__checkBox'\n    let classesForCardInside = 'hide'\n    let classesForLabelInput = 'summary__chooseInsideLabel'\n\n    let inside = null\n    if (isChooseInside) {\n        inside = 'ВНУТРЕННИЙ'\n        classesForCheckBox = classesForCheckBox + ' summary__checkBox-topCheckBox'\n        classesForCardInside = 'card-title amber-text text-lighten-3'\n        classesForLabelInput = classesForLabelInput + ' mt-7'\n    }\n\n    let classesIfWarning = ''\n    if (isWarning) classesIfWarning = 'red lighten-1'\n\n    let classesIfPrimary = 'form__input orange darken-1 summary__ops-input'\n    if (isPrimary) classesIfPrimary = 'form__input summary__ops-input summary__ops-input-colors'\n\n    if (isInside) {\n        inside = 'ВНУТРЕННИЙ'\n        classesForCardInside = 'card-title'\n    }\n\n    // componentDidUpdate\n    // Поднять наверх ВНУТРЕННИЙ или нет\n    useEffect(() => {\n        onCheckInside(isChooseInside)\n    // eslint-disable-next-line\n    }, [isChooseInside])\n\n    //Передать наверх данные из поля ПРОБЛЕМА\n    // componentDidUpdate\n    useEffect(() => {\n        getProblemForAllCards(isProblem)\n    // eslint-disable-next-line\n    }, [isProblem])\n\n    //Передать наверх данные из поля КТО ОПОВЕЩЕН\n    // componentDidUpdate\n    useEffect(() => {\n        getWhoNotify(isWhoNotify)\n    // eslint-disable-next-line\n    }, [isWhoNotify])\n\n    //Передать наверх данные из поля OPS\n    // componentDidUpdate\n    useEffect(() => {\n        getOpsNumberForAllCards(isOpsNumber)\n    // eslint-disable-next-line\n    }, [isOpsNumber])\n\n\n    //Передать наверх данные из поля Примечание Открытия\n    useEffect(() => {\n        toGetDataNotes(isNotes)\n    // eslint-disable-next-line\n    }, [isNotes])\n\n    //Передать наверх длительность инцидента\n    useEffect(() => {\n        toGetDurationIncident({hourClosing: isInputHourForClosing, minuteClosing: isInputMinuteForClosing})\n        // eslint-disable-next-line\n    }, [isInputHourForClosing, isInputMinuteForClosing])\n\n    //Передать наверх примечание Закрытия\n    useEffect(() => {\n        toNotesClosingOut(isNotesClosing)\n        // eslint-disable-next-line\n    }, [isNotesClosing])\n\n    if (flagOpening) {\n        return(\n            <ViewOpening\n\n                inside={inside}\n                stand={stand}\n                tgOut={tgOut}\n                priority={priority}\n                effect={effect}\n                qualities={qualities}\n\n                isChooseInside={isChooseInside}\n                isProblem={isProblem}\n                isOpsNumber={isOpsNumber}\n                isNotes={isNotes}\n                isWhoNotify={isWhoNotify}\n\n                onChooseInside={onChooseInside}\n                onWriteInput={onWriteInput}\n                onWarningForOps={onWarningForOps}\n\n                classesForCheckBox={classesForCheckBox}\n                classesForCardInside={classesForCardInside}\n                classesForLabelInput={classesForLabelInput}\n                classesIfWarning={classesIfWarning}\n                classesIfPrimary={classesIfPrimary}\n\n                toCopyMarkdown={toCopyMarkdown}\n\n                isStartDate={isStartDate}\n                setStartDate={setStartDate}\n            />\n        )\n    }\n\n    return(\n        <ViewClosing\n\n            inside={inside}\n            stand={stand}\n            tgOut={tgOut}\n            priority={priority}\n            effect={effect}\n            qualities={qualities}\n\n            isChooseInside={isChooseInside}\n            isNotesClosing={isNotesClosing}\n            isProblemForAllCards={isProblemForAllCards}\n            isOpsNumberAllCards={isOpsNumberAllCards}\n            isWhoNotifyForClosing={isWhoNotifyForClosing}\n\n            onWriteInput={onWriteInput}\n\n            classesForCardInside={classesForCardInside}\n\n            toCopyMarkdown={toCopyMarkdown}\n            // isGetTimeStart={isGetTimeStart}\n\n            isEndDate={isEndDate}\n            setEndDate={setEndDate}\n            durationIncOut={durationIncOut}\n        />\n    )\n\n};\n\nexport default CardItem;\n\nconst ViewOpening = (props) => {\n    const {\n        inside,\n        stand,\n        qualities,\n        tgOut,\n        priority,\n        effect,\n\n        isChooseInside,\n        isProblem,\n        isOpsNumber,\n        isNotes,\n        isWhoNotify,\n\n        onChooseInside,\n        onWriteInput,\n        onWarningForOps,\n\n        classesForCheckBox,\n        classesForCardInside,\n        classesForLabelInput,\n        classesIfWarning,\n        classesIfPrimary,\n\n        toCopyMarkdown,\n\n        isStartDate,\n        setStartDate,\n    } = props\n\n    return(\n        <div className=\"card blue-grey darken-1 summary\">\n            <div className=\"card-content white-text summary-head\">\n\n                <div className={classesForCheckBox}>\n                    <div className=\"summary__checkbox-content\">\n                        <span className={classesForCardInside}>{inside}</span>\n                        <span className=\"card-title\">Инцидент ОТКРЫТ</span>\n                    </div>\n\n                    <label className={classesForLabelInput}>\n                        <input\n                            type=\"checkbox\"\n                            name='inside'\n                            className=\"filled-in summary__chooseInside\"\n                            checked={isChooseInside}\n                            onChange={onChooseInside}\n                        />\n                        <span>Внутренний</span>\n                    </label>\n                </div>\n\n                <span className=\"card-title\"><span className='red-text text-lighten-3 colorCoral'>{stand}</span> <span className='colorAqua'>{qualities}</span></span>\n            </div>\n\n            <div className=\"card-action\">\n                <div className=\"summary__body\">\n\n                    <TextareaAutosize\n                        className='summary__area'\n                        value={isProblem}\n                        name=\"problem\"\n                        placeholder='Описание проблемы...'\n                        onChange={onWriteInput}\n                    />\n\n                    <p>ТГ: <span>{tgOut}</span></p>\n\n                    <p>Приоритет: <span>{priority}</span></p>\n                    <p>Степень влияния: <span>{effect}</span></p>\n\n                    <div className=\"summary__ops\">\n                        <p className={classesIfWarning}>https://jira.crpt.ru/browse/OPS-</p>\n                        <input\n                            value={isOpsNumber}\n                            name='ops'\n                            className={classesIfPrimary}\n                            placeholder='00000'\n                            type=\"text\"\n                            onChange={onWriteInput}\n                            onBlur={onWarningForOps}\n                        />\n                    </div>\n\n                    <div className='summary__time'>\n                        <div className='summary__time-title'>Начало инцидента:</div>\n                        <DatePicker\n                            selected={isStartDate}\n                            onChange={(date) => setStartDate(date)}\n                            showTimeSelect\n                            dateFormat=\"dd.MM.yyyy HH:mm\"\n                            timeFormat={\"HH:mm\"}\n                        />\n                    </div>\n\n                    <div className='summary__whoIsNotify'>\n                        <div className='summary__whoIsNotify-title'>Кто оповещён:</div>\n                        <TextareaAutosize\n                        className='summary__area'\n                        value={isWhoNotify}\n                        name=\"whoIsNotify\"\n                        onChange={onWriteInput}\n                    /></div>\n\n                    <p>Примечание:</p>\n\n                    <TextareaAutosize\n                        className='summary__area'\n                        value={isNotes}\n                        name=\"notes\"\n                        placeholder='Решение проблемы...'\n                        onChange={onWriteInput}\n                    />\n                </div>\n            </div>\n\n            <div className=\"txt-out__card-footer\">\n                <button\n                    className=\"btn-floating waves-effect waves-light main__action-btn-green\"\n                    onClick={() => {toCopyMarkdown('opening')}}\n                >\n                    <i className=\"material-icons\">content_copy</i>\n                </button>\n            </div>\n        </div>\n    )\n}\n\nconst ViewClosing = (props) => {\n    const {\n        inside,\n        stand,\n        qualities,\n        tgOut,\n        priority,\n        effect,\n\n        isNotesClosing,\n        isProblemForAllCards,\n        isOpsNumberAllCards,\n\n        isWhoNotifyForClosing,\n\n        onWriteInput,\n\n        classesForCardInside,\n\n        toCopyMarkdown,\n        // isGetTimeStart,\n\n        isEndDate,\n        setEndDate,\n\n        durationIncOut,\n    } = props\n\n    return(\n        <div className=\"card blue-grey darken-1 summary\">\n            <div className=\"card-content white-text summary-head\">\n\n                <div className=\"summary__checkbox-content\">\n                    <span className={classesForCardInside}>{inside}</span>\n                    <span className=\"card-title\">Инцидент ЗАКРЫТ</span>\n                </div>\n\n                <span className=\"card-title\"><span>{stand}</span> <span>{qualities}</span></span>\n            </div>\n\n            <div className=\"card-action\">\n                <div className=\"summary__body summary__body-closing\">\n                    <p>{isProblemForAllCards}</p>\n\n                    <p>ТГ: <span>{tgOut}</span></p>\n\n                    <p>Приоритет: <span>{priority}</span></p>\n                    <p>Степень влияния: <span>{effect}</span></p>\n                    <p>https://jira.crpt.ru/browse/OPS-{isOpsNumberAllCards}</p>\n\n                    {/*<p>Начало: <span className='blue-text text-accent-1'>{isGetTimeStart.startHour}:{isGetTimeStart.startMinute}</span></p>*/}\n\n                    <div className='summary__time m0'>\n                        <div className='summary__time-title'>Окончание инцидента:</div>\n                        <DatePicker\n                            selected={isEndDate}\n                            onChange={(date) => setEndDate(date)}\n                            showTimeSelect\n                            dateFormat=\"dd.MM.yyyy HH:mm\"\n                            timeFormat={\"HH:mm\"}\n                        />\n                    </div>\n\n                    <p>Длительность: <span className='blue-text text-accent-1'>{durationIncOut}</span></p>\n\n                    <p>Кто оповещен: <span>{isWhoNotifyForClosing}</span></p>\n\n                    <p>Примечание:</p>\n                    <TextareaAutosize\n                        className='summary__area'\n                        value={isNotesClosing}\n                        name=\"notesClosing\"\n                        placeholder='Решение проблемы...'\n                        onChange={onWriteInput}\n                    />\n                </div>\n            </div>\n\n            <div className=\"txt-out__card-footer\">\n                <button\n                    className=\"btn-floating waves-effect waves-light main__action-btn-green\"\n                    onClick={() => {toCopyMarkdown('closing')}}\n                >\n                    <i className=\"material-icons\">content_copy</i>\n                </button>\n            </div>\n        </div>\n    )\n}","import CardItem from \"./cardItem\";\nexport default CardItem;","import NotifyPerson from \"./notifyPerson\";\nexport default NotifyPerson;","import './notifyPerson.css'\nimport {useEffect} from \"react\";\nimport CopyMarkdown from \"../copyMarkdown\";\n\nconst NotifyPerson = (props) => {\n    const {\n        isNotifyPerson = Array.prototype,\n        isDataForCard = Object.prototype,\n        toGetNotesForPerson = Function.prototype,\n        toGetAlert = Function.prototype\n    } = props\n\n    let priority = null\n    let effect = null\n    let pre = 'о'\n\n    if (isDataForCard.priority === 'Критический') priority = 'критическом'\n    if (isDataForCard.priority === 'Высокий') priority = 'высоком'\n    if (isDataForCard.priority === 'Средний') priority = 'среднем'\n\n    if (isDataForCard.effect === 'Массовое') effect = 'массовом'\n    if (isDataForCard.effect === 'Групповое') effect = 'групповом'\n\n    if (priority === null) pre = 'об'\n    if (priority === null &&  effect !== null) pre = 'о'\n\n    const toCopyMarkdown = (flagCard) => {\n        const personNotify = isNotifyPerson.join(' ')\n\n        let priorityOut = ''\n        let effectOut = ''\n\n        if (priority !== null) priorityOut = ` ${priority}`\n        if (effect !== null) effectOut = ` ${effect}`\n\n        const txtForCopy = `Оповещаем ${pre}${priorityOut}${effectOut} инциденте`\n\n        toGetAlert()\n        CopyMarkdown({\n            flagCard,\n            isDataForCard,\n            txtForCopy,\n            personNotify\n        })\n    }\n\n    //componentDidUpdate\n    //передадим наверх строку сообщения для великой четверки\n    useEffect(() => {\n        let priorityOut = ''\n        let effectOut = ''\n\n        if (priority !== null) priorityOut = ` ${priority}`\n        if (effect !== null) effectOut = ` ${effect}`\n\n        toGetNotesForPerson(`Оповещаем ${pre}${priorityOut}${effectOut} инциденте`)\n    // eslint-disable-next-line\n    }, [pre, priority, effect])\n\n\n    return(\n        <div className=\"card blue-grey darken-1\">\n            <div className=\"card-content white-text summary-head summary__notifyPerson-items\">\n                {\n                    isNotifyPerson.map(item => {\n                        return (\n                            <span\n                                key={item}\n                                className='summary__notifyPerson-item'\n                            >{item}</span>\n                        )\n                    })\n                }\n            </div>\n            <div className=\"card-action summary__notifyPerson-txt\">\n                <p>Оповещаем {pre} {priority} {effect} инциденте</p>\n            </div>\n\n            <div className=\"txt-out__card-footer\">\n                <button\n                    className=\"btn-floating waves-effect waves-light main__action-btn-green\"\n                    onClick={() => {toCopyMarkdown('notify')}}\n                >\n                    <i className=\"material-icons\">content_copy</i>\n                </button>\n            </div>\n        </div>\n    )\n}\n\nexport default NotifyPerson;\n\n// import './notifyPerson.css'\n// import {useEffect} from \"react\";\n// import CopyMarkdown from \"../copyMarkdown\";\n//\n// const NotifyPerson = (props) => {\n//     const {\n//         isNotifyPerson = Array.prototype,\n//         isDataForCard = Object.prototype,\n//         toGetNotesForPerson = Function.prototype,\n//\n//         // isCopyNotify = '',\n//         toGetAlert = Function.prototype\n//     } = props\n//\n//     let priority = null\n//     let effect = null\n//     let pre = 'о'\n//\n//     if (isDataForCard.priority === 'Критический') priority = 'критическом'\n//     if (isDataForCard.priority === 'Высокий') priority = 'высоком'\n//     if (isDataForCard.priority === 'Средний') priority = 'среднем'\n//\n//     if (isDataForCard.effect === 'Массовое') effect = 'массовом'\n//     if (isDataForCard.effect === 'Групповое') effect = 'групповом'\n//\n//     if (priority === null) pre = 'об'\n//     if (priority === null &&  effect !== null) pre = 'о'\n//\n//     const toCopyMarkdown = (flagCard) => {\n//         const personNotify = isNotifyPerson.join(' ')\n//\n//         let priorityOut = ''\n//         let effectOut = ''\n//\n//         if (priority !== null) priorityOut = ` ${priority}`\n//         if (effect !== null) effectOut = ` ${effect}`\n//\n//         const txtForCopy = `Оповещаем ${pre}${priorityOut}${effectOut} инциденте`\n//\n//         toGetAlert()\n//         CopyMarkdown({\n//             flagCard,\n//             isDataForCard,\n//             txtForCopy,\n//             personNotify\n//         })\n//     }\n//\n//     //componentDidUpdate\n//     //передадим наверх строку сообщения для великой четверки\n//     useEffect(() => {\n//         let priorityOut = ''\n//         let effectOut = ''\n//\n//         if (priority !== null) priorityOut = ` ${priority}`\n//         if (effect !== null) effectOut = ` ${effect}`\n//\n//         toGetNotesForPerson(`Оповещаем ${pre}${priorityOut}${effectOut} инциденте`)\n//     // eslint-disable-next-line\n//     }, [pre, priority, effect])\n//\n//\n//     return(\n//         <div className=\"card blue-grey darken-1\">\n//             <div className=\"card-content white-text summary-head summary__notifyPerson-items\">\n//                 {\n//                     isNotifyPerson.map(item => {\n//                         return (\n//                             <span\n//                                 key={item}\n//                                 className='summary__notifyPerson-item'\n//                             >{item}</span>\n//                         )\n//                     })\n//                 }\n//             </div>\n//             <div className=\"card-action summary__notifyPerson-txt\">\n//                 <p>Оповещаем {pre} {priority} {effect} инциденте</p>\n//             </div>\n//\n//             <div className=\"txt-out__card-footer\">\n//                 <button\n//                     className=\"btn-floating waves-effect waves-light main__action-btn-green\"\n//                     onClick={() => {toCopyMarkdown('notify')}}\n//                 >\n//                     <i className=\"material-icons\">content_copy</i>\n//                 </button>\n//             </div>\n//         </div>\n//     )\n// }\n//\n// export default NotifyPerson;","import UpdateCard from \"./updateCard\";\nexport default UpdateCard;","import TextareaAutosize from \"react-textarea-autosize\";\nimport {useEffect, useState} from \"react\";\nimport CopyMarkdown from \"../copyMarkdown\";\n\nconst UpdateCard = (props) => {\n    const {\n        toGetDataUpdate = Function.prototype,\n        isDataForCard,\n        isInside,\n\n        toGetAlert = Function.prototype,\n    } = props\n\n    const {stand, qualities} = isDataForCard\n\n    const [isNotesUpdate, setNotesUpdate] = useState('')\n\n    let inside = null\n    let classesForCardInside = 'hide'\n\n    if (isInside) {\n        inside = 'ВНУТРЕННИЙ'\n        classesForCardInside = 'card-title'\n    }\n\n    const onWriteInputUpdate = (event) => {\n        let {value} = event.target\n\n        setNotesUpdate(value)\n    }\n\n    const toCopyMarkdown = (flagCard) => {\n        toGetAlert()\n        CopyMarkdown({\n            flagCard,\n            isDataForCard,\n            isInside,\n            isNotesUpdate\n        })\n    }\n\n    //componentDidUpdate\n    //передать наверх данные из INPUT update\n    useEffect(() => {\n        toGetDataUpdate(isNotesUpdate)\n    // eslint-disable-next-line\n    }, [isNotesUpdate])\n\n    return(\n        <div className=\"card blue-grey darken-1\">\n            <div className=\"card-content white-text summary-head\">\n                <div className=\"\">\n                    <span className={classesForCardInside}>{inside}</span>\n                    <span className=\"card-title\">Инцидент в работе</span>\n                </div>\n\n                <span className=\"card-title\"><span>{stand}</span> <span>{qualities}</span></span>\n            </div>\n            <div className=\"card-action\">\n                <TextareaAutosize\n                    className='summary__area'\n                    value={isNotesUpdate}\n                    name=\"notesUpdate\"\n                    placeholder='Update...'\n                    onChange={onWriteInputUpdate}\n                />\n            </div>\n\n            <div className=\"txt-out__card-footer\">\n                <button\n                    className=\"btn-floating waves-effect waves-light main__action-btn-green\"\n                    onClick={() => {toCopyMarkdown('update')}}\n                >\n                    <i className=\"material-icons\">content_copy</i>\n                </button>\n            </div>\n        </div>\n    )\n}\nexport default UpdateCard\n\n// import TextareaAutosize from \"react-textarea-autosize\";\n// import {useEffect, useState} from \"react\";\n// import CopyMarkdown from \"../copyMarkdown\";\n//\n// const UpdateCard = (props) => {\n//     const {\n//         toGetDataUpdate = Function.prototype,\n//         // isCopyUpdate = '',\n//\n//         isDataForCard,\n//         isInside,\n//\n//         toGetAlert = Function.prototype,\n//     } = props\n//\n//     const {stand, qualities} = isDataForCard\n//\n//     const [isNotesUpdate, setNotesUpdate] = useState('')\n//\n//     let inside = null\n//     let classesForCardInside = 'hide'\n//\n//     if (isInside) {\n//         inside = 'ВНУТРЕННИЙ'\n//         classesForCardInside = 'card-title'\n//     }\n//\n//     const onWriteInputUpdate = (event) => {\n//         let {value} = event.target\n//\n//         setNotesUpdate(value)\n//     }\n//\n//     const toCopyMarkdown = (flagCard) => {\n//         toGetAlert()\n//         CopyMarkdown({\n//             flagCard,\n//             isDataForCard,\n//             isInside,\n//             isNotesUpdate\n//         })\n//     }\n//\n//     //componentDidUpdate\n//     //передать наверх данные из INPUT update\n//     useEffect(() => {\n//         toGetDataUpdate(isNotesUpdate)\n//     // eslint-disable-next-line\n//     }, [isNotesUpdate])\n//\n//     return(\n//         <div className=\"card blue-grey darken-1\">\n//             <div className=\"card-content white-text summary-head\">\n//                 <div className=\"\">\n//                     <span className={classesForCardInside}>{inside}</span>\n//                     <span className=\"card-title\">Инцидент в работе</span>\n//                 </div>\n//\n//                 <span className=\"card-title\"><span>{stand}</span> <span>{qualities}</span></span>\n//             </div>\n//             <div className=\"card-action\">\n//                 <TextareaAutosize\n//                     className='summary__area'\n//                     value={isNotesUpdate}\n//                     name=\"notesUpdate\"\n//                     placeholder='Update...'\n//                     onChange={onWriteInputUpdate}\n//                 />\n//             </div>\n//\n//             <div className=\"txt-out__card-footer\">\n//                 <button\n//                     className=\"btn-floating waves-effect waves-light main__action-btn-green\"\n//                     onClick={() => {toCopyMarkdown('update')}}\n//                 >\n//                     <i className=\"material-icons\">content_copy</i>\n//                 </button>\n//             </div>\n//         </div>\n//     )\n// }\n// export default UpdateCard","import Alert from \"./alert\";\nexport default Alert;","import './alert.css'\n\nconst Alert = (props) => {\n    const {\n        isAlert = false\n    } = props\n\n    let classesForShowAlert = 'hide'\n    if (isAlert) classesForShowAlert = 'main__alert'\n\n    return(\n        <div id=\"toast-container\" className={classesForShowAlert}>\n            <div className=\"toast\">\n                Скопировано в буфер!\n            </div>\n        </div>\n    )\n}\n\nexport default Alert;","import CardsList from \"./cardsList\";\nexport default CardsList;","import {useEffect, useState} from \"react\";\n\nimport './cardsList.css';\nimport CardItem from \"../cardItem\";\nimport NotifyPerson from \"../notifyPerson\";\nimport UpdateCard from \"../updateCard\";\nimport Alert from \"../table/alert\";\n\nconst CardsList = (props) => {\n    const {\n        isDataForCard = Object.prototype,\n        isNotifyPerson = Array.prototype,\n    } = props\n\n    const [isInside, setInside] = useState(false)\n    const [isProblemForAllCards, setProblemForAllCards] = useState(null)\n    const [isOpsNumberAllCards, setOpsNumberAllCards] = useState(null)\n    const [isWhoNotifyForClosing, setWhoNotifyForClosing] = useState(null)\n    const [isAlert, setAlert] = useState(false)\n    const [isGetDataTime, setGetDataTime] = useState({})\n    const [isGetTimeStart, setGetTimeStart] = useState({})\n    const [isStartDay, setStartDay] = useState(false)\n\n    const toGetDataTime = (start) => {\n        setGetDataTime(start)\n    }\n\n    const toGetTimeStart = (start) => {\n        setGetTimeStart(start)\n    }\n\n    const toGetAlert = () => {\n        setAlert(true)\n    }\n\n    const closeAlert = () => {\n        setAlert(false)\n    }\n\n    // componentDidUpdate\n    // изчезновение алерта Скопировано в буфер\n    useEffect(() => {\n        const timerId = setTimeout(() => closeAlert(), 3000);\n\n        // componentDidUnmount\n        return () => clearTimeout(timerId)\n        // eslint-disable-next-line\n    }, [isAlert]);\n\n    const onCheckInside = (flag) => {\n        setInside(flag)\n    }\n\n    const getProblemForAllCards = (text) => {\n        setProblemForAllCards(text)\n    }\n\n    const getOpsNumberForAllCards = (num) => {\n        setOpsNumberAllCards(num)\n    }\n\n    const getWhoNotify = (txt) => {\n        setWhoNotifyForClosing(txt)\n    }\n\n    return(\n        <div className=\"summary-forms\">\n            <CardItem\n                isDataForCard={isDataForCard}\n                onCheckInside={onCheckInside}\n                getProblemForAllCards={getProblemForAllCards}\n                getOpsNumberForAllCards={getOpsNumberForAllCards}\n                getWhoNotify={getWhoNotify}\n\n                toGetAlert={toGetAlert}\n                toGetDataTime={toGetDataTime}\n                toGetTimeStart={toGetTimeStart}\n\n                getStartDay={(day => setStartDay(day))}\n            />\n\n            <div className=\"summary summary__helpers\">\n                <UpdateCard\n                    isDataForCard={isDataForCard}\n                    isInside={isInside}\n\n                    toGetAlert={toGetAlert}\n                />\n\n                <NotifyPerson\n                    isNotifyPerson={isNotifyPerson}\n                    isDataForCard={isDataForCard}\n\n                    toGetAlert={toGetAlert}\n                />\n            </div>\n\n            {/*Закрытие*/}\n            <CardItem\n                flagOpening={false}\n\n                isDataForCard={isDataForCard}\n\n                isInside={isInside}\n                isProblemForAllCards={isProblemForAllCards}\n                isOpsNumberAllCards={isOpsNumberAllCards}\n\n                isWhoNotifyForClosing={isWhoNotifyForClosing}\n\n                toGetAlert={toGetAlert}\n\n                isGetTimeStart={isGetTimeStart}\n                isGetDataTime={isGetDataTime}\n\n                isStartDay={isStartDay}\n            />\n\n            <Alert\n                isAlert={isAlert}\n            />\n        </div>\n    )\n};\n\nexport default CardsList;","import Main from \"./main\";\nexport default Main;","import {useState} from \"react\";\nimport ControlPanel from \"../../controlPanel\";\nimport CardsList from \"../../cardsList\";\nimport DataForItem from \"../../../data/dataForItem\";\n\nconst Main = () => {\n\n    const [isDataForCard, setDataForCard] = useState({})\n    const [isNotifyPerson, setNotifyPerson] = useState([])\n\n    const toGetDataFromPanel = (obj) => {\n        setDataForCard(obj)\n    }\n\n    const toGetNotifyPerson = (obj) => {\n        // обрабатываем объект из панели оповещения и отправляем userName в массив isNotifyPerson\n        const arr = []\n\n        DataForItem.notifyPerson.forEach(item => {\n            if (obj[item.name]) arr.push(item.userName)\n        })\n\n        setNotifyPerson(arr)\n    }\n\n    return(\n        <>\n            <ControlPanel\n                toGetDataFromPanel={toGetDataFromPanel}\n                toGetNotifyPerson={toGetNotifyPerson}\n            />\n\n            <div className='content container'>\n                <CardsList\n                    isDataForCard={isDataForCard}\n                    isNotifyPerson={isNotifyPerson}\n                />\n            </div>\n        </>\n\n    )\n};\n\nexport default Main;","import Footer from \"./footer\";\nexport default Footer;","const Footer = () => {\n    return(\n        <footer className=\"page-footer blue-grey darken-4\">\n            <div className=\"footer-copyright\">\n                <div className=\"container\">\n                    DUTY © {new Date().getFullYear()}\n                    <a className=\"grey-text text-lighten-4 right\" href=\"https://confluence.crpt.ru/pages/viewpage.action?pageId=142367287\" target=\"_blank\" rel=\"noreferrer\">Confluence</a>\n                </div>\n            </div>\n        </footer>\n    )\n};\n\nexport default Footer;","import Header from \"../layout/header\";\nimport Main from \"../layout/main\";\nimport Footer from \"../layout/footer\";\nimport './App.css';\n\nfunction App() {\n    return (\n        <>\n            <Header />\n            <Main />\n            <Footer />\n        </>\n    );\n}\n\nexport default App;","import App from \"./app\";\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from \"./components/app\";\n\nimport 'materialize-css/dist/css/materialize.min.css';\nimport './index.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}